workspace( name = "mina" )
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository", "new_git_repository")

## Repository Bootstrapping: Fetch, Load, and Run

## For each language, we need to fetch the rules repos,
## load function symbols, and then execute the functions.
## Then we need to do the same for our repo deps,
## and where our direct repo deps have their own repo deps,
## we need load and run the functions that bootstrap them.

## We encapsulate the rule fetches (repository rules) in extension
## functions called "<lang>_fetch_rules"; these are found in
## "//:BUILD.bzl".

## For library repos we encapsulate fetches in functions called
## "*_fetch_repo" (or "_repos"). For direct depdendents these are
## located in "bzl/external/<lang>_repos.bzl"; for example see
## "bzl/external/ocaml_repos.bzl". For indirect dependents -
## repositories that the direct dependents import - they are located
## in extension files within the repo, usually "//:BUILD.bzl". See
## libp2p below for an example.

## However we cannot encapsulate "load(...)" statements, like this,
## since they must be at the top level. So our procedure is to call
## the functions that fetch all the rules/repos at one go, and then
## issue "load" statements to get access to the functions, and then
## run the loaded functions.

## IMPORTANT: order matters.

################ C/C++ Rules ################
## these are needed by some external repos, like zlib
load("//:WORKSPACE.bzl", "cc_fetch_rules")
# load("//bzl/external:cc_repos.bzl", "cc_fetch_rules")
cc_fetch_rules()

load("@rules_foreign_cc//:workspace_definitions.bzl", "rules_foreign_cc_dependencies")
rules_foreign_cc_dependencies()

################################################
################ Golang Support ################
## libp2p_helper is a repository, but is embedded, not remote, so we
## use "local_repository", which must be executed as a top-level
## instruction in the workspace file.
local_repository(name = "libp2p_helper", path = "src/app/libp2p_helper")

## since libp2p_helper is our only golang repo, it includes the
## language fetch rules as well as its indirect lib fetch rules.
# gazelle:proto disable_global
load("@libp2p_helper//:BUILD.bzl", "libp2p_fetch_go_rules", "libp2p_fetch_go_libs")
libp2p_fetch_go_rules()

load("@io_bazel_rules_go//go:deps.bzl",
     "go_download_sdk",
     "go_register_toolchains",
     "go_rules_dependencies",
     )

go_download_sdk(
    name = "go_sdk",
    version = "1.13",
)
go_rules_dependencies()
go_register_toolchains()

load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")
protobuf_deps()

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies", "go_repository")

libp2p_fetch_go_libs(go_repository)

gazelle_dependencies(go_repository_default_config = "@libp2p_helper//:WORKSPACE.bazel")

######################################
###############  OCaml ###############
load("//:WORKSPACE.bzl", "ocaml_fetch_rules")
ocaml_fetch_rules()

#### bootstrap language support
load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")
bazel_skylib_workspace()

load("@obazl_rules_opam//opam:bootstrap.bzl", opam_configure = "configure")
load("//bzl:opam.bzl", "opam")
switch = opam_configure(opam = opam)

load("@obazl_rules_ocaml//ocaml:bootstrap.bzl", ocaml_configure = "configure")
ocaml_configure( switch = switch )

################################
# direct deps
load("//bzl/external:ocaml_repos.bzl", "ocaml_fetch_libs")
ocaml_fetch_libs()

# indirect deps
load("@ocaml_rocksdb//:WORKSPACE.bzl", "librocksdb_fetch_repos")
librocksdb_fetch_repos()

load("@ocaml_sodium//:WORKSPACE.bzl", "libsodium_fetch_repo")
libsodium_fetch_repo("1.0.18-RELEASE")

load("@ocaml_jemalloc//:WORKSPACE.bzl", "libjemalloc_fetch_repo")
libjemalloc_fetch_repo()

# the remaining ocaml repo deps do not import any repos (no indirect deps)

################################################################
## bazel remote repos embedded as git submodules
# local_repository( name = "graphql_ppx"  , path = "src/external/graphql_ppx")
# local_repository( name = "ppx_optcomp"  , path = "src/external/ppx_optcomp")
# local_repository( name = "ppx_version"  , path = "src/external/ppx_version")
# local_repository( name = "snarky" , path = "src/lib/snarky")

# https://github.com/bkase/tablecloth
# local_repository( name = "tablecloth" , path = "frontend/wallet/tablecloth")

################################################################
## opam-pinned repos, we do not need them in as bazel repos
## opam-pinned embedded (non-remoted) repos, we do not need them as bazel repos
# local_repository( name = "async_kernel" , path = "src/external/async_kernel")
# local_repository( name = "ocaml_extlib" , path = "src/external/ocaml_extlib")
# local_repository( name = "rpc_parallel" , path = "src/external/rpc_parallel")

# https://github.com/MinaProtocol/coda-automation.git
# local_repository( name = "coda-automation" , path = "coda-automation")

# https://github.com/bkase/tablecloth
# local_repository( name = "tablecloth" , path = "frontend/wallet/tablecloth")


# ################################################################
# ################################################################


# workspace( name = "coda" )

# load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
# load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository", "new_git_repository")

# ################################################################
# #### OCAML ####
# git_repository(
#     name = "obazl_rules_ocaml",
#     remote = "https://github.com/obazl/rules_ocaml",
#     branch = "dev",
#     # commit = "feef897197b36b14b65ffdf00b9badcbdb8f42f4",
#     # shallow_since = "1593623637 -0500"
# )

# load("@obazl_rules_ocaml//ocaml:bootstrap.bzl",
#      "ocaml_configure",
#      "opam_configure",
#      "ocaml_register_toolchains")

# opam_configure()

# ocaml_configure()

# ocaml_register_toolchains(installation="host")

# ################################################################
# local_repository( name = "async_kernel" , path = "src/external/async_kernel")
# local_repository( name = "graphql_ppx"  , path = "src/external/graphql_ppx")
# local_repository( name = "ocaml_extlib" , path = "src/external/ocaml_extlib")
# local_repository( name = "ppx_optcomp"  , path = "src/external/ppx_optcomp")
# local_repository( name = "ppx_version"  , path = "src/external/ppx_version")
# local_repository( name = "rpc_parallel" , path = "src/external/rpc_parallel")

# ######################################
# ########    Golang Support    ########
# http_archive(
#     name = "io_bazel_rules_go",
#     sha256 = "b725e6497741d7fc2d55fcc29a276627d10e43fa5d0bb692692890ae30d98d00",
#     urls = [
#         "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.24.3/rules_go-v0.24.3.tar.gz",
#         "https://github.com/bazelbuild/rules_go/releases/download/v0.24.3/rules_go-v0.24.3.tar.gz",
#     ],
# )

# load(
#     "@io_bazel_rules_go//go:deps.bzl",
#     "go_download_sdk",
#     "go_register_toolchains",
#     "go_rules_dependencies",
# )

# go_download_sdk(
#     name = "go_sdk",
#     version = "1.13",
# )

# go_rules_dependencies()

# go_register_toolchains()

# ## protobuf needed by some go deps
# git_repository(
#     name = "com_google_protobuf",
#     commit = "09745575a923640154bcf307fba8aedff47f240a",
#     remote = "https://github.com/protocolbuffers/protobuf",
#     shallow_since = "1558721209 -0700",
# )

# load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")

# protobuf_deps()

# # gazelle:proto disable_global

# http_archive(
#     name = "bazel_gazelle",
#     sha256 = "d4113967ab451dd4d2d767c3ca5f927fec4b30f3b2c6f8135a2033b9c05a5687",
#     urls = [
#         "https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v0.22.0/bazel-gazelle-v0.22.0.tar.gz",
#         "https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.22.0/bazel-gazelle-v0.22.0.tar.gz",
#     ],
# )

# load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")

# local_repository(
#     name = "libp2p_helper",
#     path = "src/app/libp2p_helper"
# )
# load("@libp2p_helper//bzl/libp2p:deps.bzl", "libp2p_bootstrap")
# libp2p_bootstrap()

# gazelle_dependencies(go_repository_default_config = "@libp2p_helper//:WORKSPACE.bazel")

################################################
################  RUST SUPPORT  ################
## we have more than one repo using Rust, so we put the fetch rules in
## this repo for both to use.
load("//:WORKSPACE.bzl", "rust_fetch_rules")
# load("//bzl/external:rust_repos.bzl", "rust_fetch_rules")
rust_fetch_rules()

load("@io_bazel_rules_rust//rust:repositories.bzl", "rust_repositories")
rust_repositories(version = "1.47.0", edition="2018")

load("@io_bazel_rules_rust//:workspace.bzl", "bazel_version")
bazel_version(name = "bazel_version")

#### direct Rust dependencies ####
load("//bzl/external:rust_repos.bzl", "rust_fetch_libs")
rust_fetch_libs()

#### indirect Rust dependencies ####
load("@zexe//bzl/cargo:crates.bzl", "zexe_fetch_remote_crates")
zexe_fetch_remote_crates()

load("@marlin//bzl/cargo:crates.bzl", "marlin_fetch_remote_crates")
marlin_fetch_remote_crates()

## local rust code, configured by "cargo raze"
load("//bzl/external/rust:crates.bzl", "marlin_plonk_bindings_fetch_remote_crates")
marlin_plonk_bindings_fetch_remote_crates()
