workspace( name = "mina" )
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository", "new_git_repository")

## Repository Bootstrapping: Fetch, Load, and Run

## For each language, we need to fetch the language rules repos,
## load function symbols, and then execute the functions.
## Then we need to do the same for our repo deps,
## and where our direct repo deps have their own repo deps,
## we need load and run the functions that bootstrap them.

## We encapsulate the rule fetches (repository rules) in extension
## functions called "<lang>_fetch_rules"; these are found in
## "//:WORKSPACE.bzl".

## For library repos we encapsulate fetches in functions called
## "*_fetch_repo" (or "_repos", or "_libs"). For direct depdendents
## these are located in "bzl/external/<lang>_repos.bzl"; for example
## see "bzl/external/ocaml_repos.bzl". For indirect dependents -
## repositories that the direct dependents import - they are located
## in extension files within the repo, usually "//:BUILD.bzl". See
## libp2p below for an example.

## However we cannot encapsulate "load(...)" statements, like this,
## since they must be at the top level. So our procedure is to call
## the functions that fetch all the rules/repos at one go, and then
## issue "load" statements to get access to the functions, and then
## run the loaded functions.

## IMPORTANT: order matters.

######################################
###############  OCaml ###############
# now we do the same for the OCaml rules and lib repos.
http_archive(
    name = "bazel_skylib",
    urls = [
        "https://github.com/bazelbuild/bazel-skylib/releases/download/1.0.3/bazel-skylib-1.0.3.tar.gz",
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.0.3/bazel-skylib-1.0.3.tar.gz",
    ],
    sha256 = "1c531376ac7e5a180e0237938a2536de0c54d93f5c278634818e0efc952dd56c",
)

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")
bazel_skylib_workspace()

#############
http_archive(
    name = "obazl_rules_ocaml",
    strip_prefix = "rules_ocaml-b8ccb8eb0738f303b1a68b89d4af5998fa30c955",
    # strip_prefix = "rules_ocaml-06eaca64f51a198978a803532b9e0be1c52ff45d",
    urls = [
        "https://github.com/obazl/rules_ocaml/archive/b8ccb8eb0738f303b1a68b89d4af5998fa30c955.tar.gz"
        # "https://github.com/obazl/rules_ocaml/archive/06eaca64f51a198978a803532b9e0be1c52ff45d.tar.gz"
    ],
    sha256 = "168bd297208ad9050dbe913e6bc85c1ca4bdfcd3884a76c3b34c4bd970d4caba"
    # sha256 = "45fdda94f8e66982ae7c0a43527c6254b31af32484bdc8a57a789bfd918e52b3"
)

load("@obazl_rules_ocaml//ocaml:bootstrap.bzl", "ocaml_configure")
load("//:WORKSPACE.bzl", "opam")
ocaml_configure( opam = opam, build = "mina-0.1.0" )

################ C/C++ Rules ################
## these are needed by some external repos, like zlib
load("//:WORKSPACE.bzl", "cc_fetch_rules")
# load("//bzl/external:cc_repos.bzl", "cc_fetch_rules")
cc_fetch_rules()

load("@rules_foreign_cc//:workspace_definitions.bzl", "rules_foreign_cc_dependencies")
rules_foreign_cc_dependencies()

################################################
################ Golang Support ################
## libp2p_helper is a repository, but is embedded, not remote, so we
## use "local_repository", which must be executed as a top-level
## instruction in the workspace file.
local_repository(name = "libp2p_helper", path = "src/app/libp2p_helper")

## since libp2p_helper is our only golang repo, it includes the
## language fetch rules as well as its indirect lib fetch rules.
# gazelle:proto disable_global
load("@libp2p_helper//:WORKSPACE.bzl", "libp2p_fetch_go_rules", "libp2p_fetch_go_libs")

# first we fetch the repos containing the go language rules.
libp2p_fetch_go_rules()

# now we can load the function symbols we need from the fetched language rules.
load("@io_bazel_rules_go//go:deps.bzl",
     "go_download_sdk",
     "go_register_toolchains",
     "go_rules_dependencies",
     )

# finally, we execute the functions, which initialize language support.
go_download_sdk(
    name = "go_sdk",
    version = "1.13",
)
go_rules_dependencies()
go_register_toolchains()

# we don't use protobufs, but the language rules do, so we need this:
load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")
protobuf_deps()

# gazelle is a tool we use to maintain our go build code.
load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies", "go_repository")

# once the language support is in place, we fetch the lib repos our code depends on.
libp2p_fetch_go_libs(go_repository)

# and prep the gazelle tool.
gazelle_dependencies(go_repository_default_config = "@libp2p_helper//:WORKSPACE.bazel")

################################################################
# ocaml deps
load("//bzl/external:ocaml_repos.bzl", "ocaml_fetch_libs")
ocaml_fetch_libs()

#### wrapped cc deps - ocaml_fetch_libs() fetches three ocaml libs
## that have cc deps, which must be fetch separately:
load("@ocaml_rocksdb//:WORKSPACE.bzl", "librocksdb_fetch_repos")
librocksdb_fetch_repos()

load("@ocaml_sodium//:WORKSPACE.bzl", "libsodium_fetch_repo")
libsodium_fetch_repo("1.0.18-RELEASE")

load("@ocaml_jemalloc//:WORKSPACE.bzl", "libjemalloc_fetch_repo")
libjemalloc_fetch_repo()

################################################
################  RUST SUPPORT  ################
## we have more than one repo using Rust, so we put the fetch rules in
## this repo for both to use.
load("//:WORKSPACE.bzl", "rust_fetch_rules")
# load("//bzl/external:rust_repos.bzl", "rust_fetch_rules")
rust_fetch_rules()

load("@rules_rust//rust:repositories.bzl",
     "rust_repositories", "rust_repository_set")

rust_repositories(version = "1.47.0", rustfmt_version = "1.4.20", edition="2018")

#### Application Rust dependencies ####
## to use submodules:
local_repository( name = "marlin" , path = "src/lib/marlin")
local_repository( name = "zexe" , path = "src/lib/marlin/zexe")

## use this if NOT using submodules:
# load("//bzl/external:rust_repos.bzl", "rust_fetch_libs")
# rust_fetch_libs()

#### indirect Rust dependencies ####
load("@zexe//bzl/raze:crates.bzl", zexe_fetch_remote_crates = "raze_fetch_remote_crates")
zexe_fetch_remote_crates()

load("@marlin//bzl/raze:crates.bzl", marlin_fetch_remote_crates = "raze_fetch_remote_crates")
marlin_fetch_remote_crates()

## local rust code, configured by "cargo raze"
load("//bzl/raze:crates.bzl", marlin_plonk_bindings_fetch_remote_crates = "raze_fetch_remote_crates")
marlin_plonk_bindings_fetch_remote_crates()

