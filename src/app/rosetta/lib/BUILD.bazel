load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ppx_executable",
)

GRAPHQL_SCHEMA_FILE = "graphql_schema.json"

GRAPHQL_SCHEMA_PATH = GRAPHQL_SCHEMA_FILE

GRAPHQL_SCHEMA_JSON = "//:" + GRAPHQL_SCHEMA_FILE

INLINE_TEST_LIB = "rosetta-lib"

################################################################
## STANZA 1: LIBRARY LIB
################################################################
LIB_MODULE_OPTS = []

LIB_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/logger",
    "@mina//src/lib/rosetta_lib",
    "@mina//src/lib/rosetta_models",
    "@mina//src/lib/rosetta_coding",
    "@mina//src/app/archive/archive_lib",
    "@mina//src/lib/signature_lib",
    "@mina//src/lib/secrets",
    "@mina//src/lib/unsigned_extended",
]

LIB_DEPS_OPAM = [
    "async",
    "async_ssl",
    "caqti",
    "caqti-async",
    "caqti-driver-postgresql",
    "cohttp",
    "ctypes",
    "cohttp-async",
    "core_kernel",
    "ppx_deriving_yojson.runtime",
    "yojson",
]

#########
ocaml_ns_library(
    name = "lib",
    submodules = [
        # do not sort (buildifier)
        ":_Account",
        ":_Block",
        ":_Cli",
        ":_Construction",
        ":_Decoders",
        ":_Graphql",
        ":_Mempool",
        ":_Network",
        ":_Rosetta",
        ":_Signer",
        ":_Test",
        ":_These",
    ],
    visibility = [
        "//src/app/best_tip_merger:__pkg__",
        "//src/app/rosetta:__subpackages__",
    ],
)

#############
ocaml_module(
    name = "_Account",
    struct = "account.ml",
    opts = LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        INLINE_TEST_LIB,
        "-schema",
        GRAPHQL_SCHEMA_PATH,
    ],
    ppx_data = [GRAPHQL_SCHEMA_JSON],
    deps = LIB_DEPS + [
        # do not sort (buildifier)
        ":_Decoders",  # obazl:retain
        ":_Graphql",
        ":_Network",
    ],
    deps_opam = LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Block",
    struct = "block.ml",
    opts = LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        INLINE_TEST_LIB,
        "-schema",
        GRAPHQL_SCHEMA_PATH,
    ],
    ppx_data = [GRAPHQL_SCHEMA_JSON],
    deps = LIB_DEPS + [
        # do not sort (buildifier)
        ":_Decoders",  # obazl:retain
        ":_Graphql",
        ":_Network",
        ":_These",
    ],
    deps_opam = LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Cli",
    struct = "cli.ml",
    opts = LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "lib",
    ],
    deps = LIB_DEPS,
    deps_opam = LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Construction",
    struct = "construction.ml",
    opts = LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        INLINE_TEST_LIB,
        "-schema={}".format("graphql_schema.json"),
    ],
    ppx_data = ["//:graphql_schema.json"],
    deps = LIB_DEPS + [
        # do not sort (buildifier)
        ":_Decoders",  # obazl:retain
        ":_Graphql",
        ":_Network",
    ],
    deps_opam = LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Decoders",
    struct = "decoders.ml",
    opts = LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "lib",
    ],
    deps = LIB_DEPS,
    deps_opam = LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Graphql",
    struct = "graphql.ml",
    opts = LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "lib",
    ],
    deps = LIB_DEPS,
    deps_opam = LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Mempool",
    struct = "mempool.ml",
    opts = LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        INLINE_TEST_LIB,
        "-schema={}".format("graphql_schema.json"),
    ],
    ppx_data = ["//:graphql_schema.json"],
    deps = LIB_DEPS + [
        # do not sort (buildifier)
        ":_Decoders",  # obazl:retain
        ":_Graphql",
        ":_Network",
    ],
    deps_opam = LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Network",
    struct = "network.ml",
    opts = LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        INLINE_TEST_LIB,
        "-schema={}".format("graphql_schema.json"),
    ],
    ppx_data = ["//:graphql_schema.json"],
    deps = LIB_DEPS + [
        # do not sort (buildifier)
        ":_Graphql",
        ":_Test",  # obazl:retain
    ],
    deps_opam = LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Rosetta",
    struct = "rosetta.ml",
    opts = LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "lib",
    ],
    deps = LIB_DEPS + [
        # do not sort (buildifier)
        ":_Account",
        ":_Block",
        ":_Cli",  # obazl:retain
        ":_Construction",
        ":_Mempool",
        ":_Network",
    ],
    deps_opam = LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Signer",
    struct = "signer.ml",
    opts = LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "lib",
    ],
    deps = LIB_DEPS,
    deps_opam = LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Test",
    struct = "test.ml",
    opts = LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "lib",
    ],
    deps = LIB_DEPS,
    deps_opam = LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_These",
    struct = "these.ml",
    opts = LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "lib",
    ],
    deps = LIB_DEPS,
    deps_opam = LIB_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    deps = [
        "@graphql_ppx//src/native:graphql_ppx",
        "@mina//src/lib/ppx_coda",
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_assert",
        "ppx_deriving.eq",
        "ppx_deriving.show",
        "ppx_deriving_yojson",
        "ppx_inline_test",
        "ppx_jane",
        "ppxlib",
    ]
)
