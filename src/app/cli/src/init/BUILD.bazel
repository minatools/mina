load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
    "ppx_executable",
)

CONFIG_MLH = ["//src:config"]

################################################################
## STANZA: LIBRARY INIT
################################################################
INIT_SIGNATURE_OPTS = []

INIT_MODULE_OPTS = []

INIT_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/snarky_log",
    "@mina//src/lib/cli_lib:cli_lib",
    "@mina//src/lib/mina_base:mina_base",
    "@mina//src/lib/mina_graphql:mina_graphql",
    "@mina//src/lib/mina_lib:mina_lib",
    "@mina//src/lib/mina_state:mina_state",
    "@mina//src/lib/consensus:consensus",
    "@mina//src/lib/mina_transition:mina_transition",
    "@mina//src/lib/mina_version",
    "@mina//src/lib/mina_user_error",
    "@mina//src/lib/o1trace:o1trace",
    "@mina//src/lib/protocol_version:protocol_version",
    "@mina//src/lib/node_status:node_status",
    "@mina//src/lib/transition_frontier:transition_frontier",
    "@mina//src/lib/web_client_pipe",
    "@mina//src/lib/web_request:web_request",
    "@mina//src/lib/graphql_lib:graphql_lib",
    "@mina//src/lib/genesis_ledger_helper:genesis_ledger_helper",
]

INIT_DEPS_OPAM = [
    "async",
    "cohttp",
    "core",
]

#########
ocaml_ns_archive(
    name = "init",
    submodules = [
        ":_Assets",
        ":_Client",
        ":_Coda_run",
        ":_Coda_tracing",
        ":_Find_ip",
        ":_Graphql_client",
        ":_Graphql_internal",
        ":_Graphql_queries",
        ":_Transaction_snark_profiler",
        ":_Visualization_message",
    ],
    visibility = [
        "//src/app/cli/src:__pkg__",
        "//src/app/cli/src/tests:__pkg__",
    ]
)
#############
ocaml_module(
    name = "_Assets",
    struct = ":assets.ml",
)

###################################
TOOL = "@ocaml//tools:ocaml-crunch"

genrule(
    name = "gensrc",
    srcs = glob(["**"]),
    outs = ["assets.ml"],
    cmd = "\n".join([
        "set -x",
        "./$(location {tool}) -m plain src/app/cli/src/init/assets -o \"$@\"".format(tool = TOOL),
    ]),
    tools = [TOOL],
)

#############
ocaml_module(
    name = "_Client",
    struct = "client.ml",
    opts = INIT_MODULE_OPTS,
    ppx = ":ppx2.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "init",
    ],
    deps = INIT_DEPS + [
        # do not sort (buildifier)
        ":_Graphql_client",
        ":_Graphql_queries",
        ":_Visualization_message",
    ],
    deps_opam = INIT_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Coda_run",
    struct = "coda_run.ml",
    opts = INIT_MODULE_OPTS,
    ppx = ":ppx2.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "init",
    ],
    # ppx_data = CONFIG_MLH,
    deps = INIT_DEPS + [
        # do not sort (buildifier)
        ":_Coda_tracing",
        ":_Graphql_internal",
        ":_Visualization_message",
    ],
    deps_opam = INIT_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Coda_tracing",
    struct = "coda_tracing.ml",
    opts = INIT_MODULE_OPTS,
    ppx = ":ppx2.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "init",
    ],
    # ppx_data = CONFIG_MLH,
    deps = INIT_DEPS,
    deps_opam = INIT_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Find_ip",
    struct = "find_ip.ml",
    sig    = ":_Find_ip.cmi",
    opts = INIT_MODULE_OPTS,
    ppx = ":ppx2.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "init",
    ],
    # ppx_data = CONFIG_MLH,
    deps = INIT_DEPS,
    deps_opam = INIT_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Find_ip.cmi",
    src = "find_ip.mli",
    opts = INIT_SIGNATURE_OPTS,
    ppx = ":ppx2.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "init",
    ],
    # ppx_data = CONFIG_MLH,
    deps = INIT_DEPS,
    deps_opam = INIT_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Graphql_client",
    struct = "graphql_client.ml",
    opts = INIT_MODULE_OPTS,
    ppx = ":ppx2.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "init",
    ],
    # ppx_data = CONFIG_MLH,
    deps = INIT_DEPS,
    deps_opam = INIT_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Graphql_internal",
    struct = "graphql_internal.ml",
    opts = INIT_MODULE_OPTS,
    ppx = ":ppx2.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "init",
    ],
    # ppx_data = CONFIG_MLH,
    deps = INIT_DEPS + [
        ":_Assets",  # obazl:retain
    ],
    deps_opam = INIT_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Graphql_queries",
    struct = "graphql_queries.ml",
    opts = INIT_MODULE_OPTS,
    ppx = ":ppx2.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "init",
        "-schema={}".format("graphql_schema.json"),
    ],
    ppx_data = ["//:graphql_schema.json"],
    deps = INIT_DEPS,
    deps_opam = INIT_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Transaction_snark_profiler",
    struct = "transaction_snark_profiler.ml",
    opts = INIT_MODULE_OPTS,
    ppx = ":ppx2.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "init",
    ],
    # ppx_data = CONFIG_MLH,
    deps = INIT_DEPS,
    deps_opam = INIT_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Visualization_message",
    struct = "visualization_message.ml",
    opts = INIT_MODULE_OPTS,
    ppx = ":ppx2.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "init",
    ],
    # ppx_data = CONFIG_MLH,
    deps = INIT_DEPS,
    deps_opam = INIT_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx2.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/app/cli/src/init:__pkg__",
    ],
    deps = [
        "@graphql_ppx//src/native:graphql_ppx",
        "@mina//src/lib/ppx_coda:ppx_coda",
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_deriving_yojson",
        "ppx_jane",
        "ppxlib",
    ]
)
