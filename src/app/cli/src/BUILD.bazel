## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_executable",
    "ocaml_module",
    "ppx_executable",
)
load(
    "//:BUILD.bzl",
    "CONFIG_MLH",
)

################################################################
## STANZA 2: EXECUTABLE CODA
################################################################
CODA_EXECUTABLE_OPTS = []

CODA_MODULE_OPTS = []

CODA_DEPS = [
    # do not sort (buildifier)
    "@ocaml_jemalloc//src:jemalloc",
    "@mina//src/app/cli/src/init",
    "@mina//src/app/cli/src/tests",
    "@mina//src/lib/consensus",
    "@mina//src/lib/child_processes",
    "@mina//src/lib/memory_stats",
    "@mina//src/lib/node_addrs_and_ports",
    "@mina//src/lib/genesis_ledger_helper",
    "@mina//src/lib/coda_plugins",
    "@mina//src/lib/error_json",
]

#################
ocaml_executable(
    name = "coda.exe",
    opts = CODA_EXECUTABLE_OPTS,
    visibility = ["//visibility:public"],
    deps = CODA_DEPS + [
        # do not sort (buildifier)
        ":_Coda",
    ],
    cc_deps = {
        ## FIXME: make this a dep on the OCaml wrapper
        "@mina//src/lib/marlin_plonk_bindings/stubs:marlin_plonk_stubs": "static",
        # "@ocaml_rocksdb//:librocksdb": "static-linkall",
        "@ocaml_rocksdb//:bzip2": "static",
        "@ocaml_rocksdb//:zlib": "static",
        "@ocaml_sodium//lib:libsodium": "static"
    },
    cc_linkall  = ["@ocaml_rocksdb//:librocksdb"],
    # cc_linkall  = ["//bzl/external/rocksdb"], # -Wl,-force_load (MacOS) or -whole-archive (Linux)
    # cc_linkopts = select({
    #     "//bzl/host:macos": ["-lc++abi", "-lc++"], # "-lsodium"],
    #     "//bzl/host:linux": ["-lstdc++"],
    # }, no_match_error = "Unsupported platform. Only Linux and MacOS supported.")
)

#############
ocaml_module(
    name = "_Coda",
    src = "coda.ml",
    opts = CODA_MODULE_OPTS,
    ppx = ":ppx2.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = CODA_DEPS,
)

###############
ppx_executable(
    name = "ppx2.exe",
    lazy_deps = [
        "@opam//pkg:yojson",
        "@opam//pkg:ppx_deriving_yojson.runtime",
        "@opam//pkg:ppx_sexp_conv.runtime-lib",
    ],
    main = "//bzl/ppx/exe:Driver",
    opts = [],
    visibility = [
        "//src/app/cli/src:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda",
        "@opam//pkg:ppx_deriving_yojson",
        "@opam//pkg:ppx_let",
        "@opam//pkg:ppx_sexp_conv",
        "@opam//pkg:ppxlib",
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:ppx_version",
    ],
)
