load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_executable",
    "ocaml_module",
    "ppx_executable",
)

CONFIG_MLH = ["//src:config"]

################################################################
## STANZA 2: EXECUTABLE MINA
################################################################
MINA_EXECUTABLE_OPTS = []

MINA_MODULE_OPTS = []

MINA_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/mina_plugins",
    # "@mina//src/app/cli/src/init",
    # "@mina//src/lib/consensus:consensus",
    # "@mina//src/lib/child_processes:child_processes",
    # "@mina//src/lib/memory_stats",
    # "@mina//src/lib/node_addrs_and_ports:node_addrs_and_ports",
    # "@mina//src/lib/genesis_ledger_helper:genesis_ledger_helper",
    # "@mina//src/lib/error_json:error_json",
] + select({

    ## tests depends on init.
    "//src/config/integration_tests:enabled": ["@mina//src/app/cli/src/tests:tests"],

    ## to build without integration_tests, pass '--no//src/config/integration_tests'
    "//conditions:default": [
        "@mina//src/app/cli/src/init",
        ## Q: why do we need to add 'parallel' explicitly?
        ## A: it's not in the depgraph of init (it is in the depgraph of tests).
        "@mina//src/lib/parallel",
    ]
})

#################
ocaml_executable(
    name = "mina",
    opts = MINA_EXECUTABLE_OPTS,
    visibility = ["//visibility:public"],
    deps = [ # MINA_DEPS + [
        # do not sort (buildifier)
        ":_Mina",
    ],
    # cc_deps = {
    #     ## FIXME: make this a dep on the OCaml wrapper
    #     "@mina//src/lib/marlin_plonk_bindings/stubs:marlin_plonk_stubs": "static",
    #     # "@ocaml_rocksdb//:librocksdb": "static-linkall",
    #     "@ocaml_rocksdb//:bzip2": "static",
    #     "@ocaml_rocksdb//:zlib": "static",
    #     "@ocaml_sodium//lib:libsodium": "static"
    # },
    # cc_linkall  = ["@ocaml_rocksdb//:librocksdb"],

    # cc_linkall  = ["//bzl/external/rocksdb"], # -Wl,-force_load (MacOS) or -whole-archive (Linux)
    # cc_linkopts = select({
    #     "//bzl/host:macos": ["-lc++abi", "-lc++"], # "-lsodium"],
    #     "//bzl/host:linux": ["-lstdc++"],
    # }, no_match_error = "Unsupported platform. Only Linux and MacOS supported.")
)

#############
ocaml_module(
    name = "_Mina",
    struct = "mina.ml",
    opts = MINA_MODULE_OPTS,
    ppx = ":ppx2.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = MINA_DEPS,
)

###############
ppx_executable(
    name = "ppx2.exe",
    deps_adjunct_opam = [
        "yojson",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/app/cli/src:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda:ppx_coda",
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppxlib",
        "ppx_let",
        "ppx_sexp_conv",
        "ppx_deriving_yojson",
    ]
)
