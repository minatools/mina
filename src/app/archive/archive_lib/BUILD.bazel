load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_archive",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY ARCHIVE_LIB
################################################################
ARCHIVE_LIB_MODULE_OPTS = []

ARCHIVE_LIB_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/mina_base:mina_base",
    "@mina//src/lib/mina_transition:mina_transition",
    "@mina//src/lib/one_or_two:one_or_two",
    "@mina//src/lib/transition_frontier:transition_frontier",
]
ARCHIVE_LIB_DEPS_OPAM = [
    "core",
    "async",
    "caqti-async",
    "caqti",
    "caqti-driver-postgresql",
]

#########
ocaml_ns_archive(
    name = "archive_lib",
    submodules = [
        ":_Ast",
        ":_Diff",
        ":_Extensional",
        ":_Processor",
        ":_Rpc",
        # ":_Test",
    ],
    visibility = [
        "//src/app/archive:__pkg__",
        "//src/app/archive_blocks:__pkg__",
        "//src/app/rosetta/lib:__pkg__",
        "//src/lib/mina_lib:__pkg__"
    ]
)

#############
ocaml_module(
    name = "_Ast",
    struct = "ast.ml",
    opts = ARCHIVE_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "archive_lib",
    ],
    deps = ARCHIVE_LIB_DEPS,
    deps_opam = ARCHIVE_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Diff",
    struct = "diff.ml",
    opts = ARCHIVE_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "archive_lib",
    ],
    deps = ARCHIVE_LIB_DEPS,
    deps_opam = ARCHIVE_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Extensional",
    struct = "extensional.ml",
    opts = ARCHIVE_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "archive_lib",
    ],
    deps = ARCHIVE_LIB_DEPS,
    deps_opam = ARCHIVE_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Processor",
    struct = "processor.ml",
    opts = ARCHIVE_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "archive_lib",
    ],
    deps = ARCHIVE_LIB_DEPS + [
        # do not sort (buildifier)
        ":_Diff",
        ":_Rpc",
        "@mina//src/lib/genesis_ledger_helper:genesis_ledger_helper",
    ],
    deps_opam = ARCHIVE_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Rpc",
    struct = "rpc.ml",
    opts = ARCHIVE_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "archive_lib",
    ],
    deps = ARCHIVE_LIB_DEPS + [
        # do not sort (buildifier)
        ":_Diff",
        ":_Extensional"
    ],
    deps_opam = ARCHIVE_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Test",
    struct = "test.ml",
    opts = ARCHIVE_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "archive_lib",
    ],
    deps = ARCHIVE_LIB_DEPS + ["_Processor"],  # obazl:retain
    deps_opam = ARCHIVE_LIB_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "ppx_hash.runtime-lib",
        "ppx_sexp_conv.runtime-lib",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/app/archive/archive_lib:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda:ppx_coda",
        "@ppx_version//src:ppx_version",
        "@snarky//h_list/ppx:ppx_h_list",
    ],
    deps_opam = [
        "ppx_custom_printf",
        "ppx_jane",
        "ppxlib",
    ]
)
