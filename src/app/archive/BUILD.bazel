load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_executable",
    "ocaml_module",
    "ppx_executable",
)

exports_files(["archive_graphql_schema.json"])

################################################################
## STANZA 1: EXECUTABLE ARCHIVE
################################################################
ARCHIVE_EXECUTABLE_OPTS = []

ARCHIVE_MODULE_OPTS = []

ARCHIVE_DEPS = [
    # do not sort (buildifier)
    "@mina//src/app/archive/archive_lib:archive_lib",
    "@mina//src/lib/cli_lib:cli_lib",
]
ARCHIVE_DEPS_OPAM = [
    "core",
    "async",
    "caqti",
    "caqti-async",
    "caqti-driver-postgresql",
]

#################
ocaml_executable(
    name = "archive",
    opts = ARCHIVE_EXECUTABLE_OPTS,
    visibility = ["//visibility:public"],
    deps = ARCHIVE_DEPS + [
        # do not sort (buildifier)
        ":_Archive",
    ],
    deps_opam = ARCHIVE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Archive",
    struct = "archive.ml",
    opts = ARCHIVE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "archive",
    ],
    deps = ARCHIVE_DEPS,
    deps_opam = ARCHIVE_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    main = "//bzl/ppx/exe:ppxlib_driver",
    deps = [
        "@ppx_version//src:ppx_version",
        "@mina//src/lib/ppx_coda:ppx_coda",
    ],
    deps_opam = [
        "ppx_jane",
    ]
)
