## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_interface",
    "ocaml_module",
    "ocaml_ns",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY NETWORK_PEER
################################################################
NETWORK_PEER_INTERFACE_OPTS = []

NETWORK_PEER_MODULE_OPTS = []

NETWORK_PEER_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:core",
    "@opam//pkg:async",
    "@opam//pkg:async_rpc_kernel",
]

##############
ocaml_archive(
    name = "network_peer",
    opts = [],
    visibility = ["//visibility:public"],
    deps = NETWORK_PEER_DEPS + [
        # do not sort (buildifier)
        ":_Envelope",
        ":_Network_peer",
        ":_Peer",
    ],
)

#########
ocaml_ns(
    name = "Network_peer_ns",
    ns = "network_peer",
    opts = [],
    submodules = [
        # do not sort (buildifier)
        "envelope.ml",
        "network_peer.ml",
        "peer.ml",
    ],
)

#############
ocaml_module(
    name = "_Envelope",
    src = "envelope.ml",
    intf = ":_Envelope.cmi",
    ns = ":Network_peer_ns",
    opts = NETWORK_PEER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_peer",
    ],
    deps = NETWORK_PEER_DEPS + [
        # do not sort (buildifier)
        ":_Peer",
    ],
)

################
ocaml_interface(
    name = "_Envelope.cmi",
    src = "envelope.mli",
    ns = ":Network_peer_ns",
    opts = NETWORK_PEER_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_peer",
    ],
    deps = NETWORK_PEER_DEPS + [
        # do not sort (buildifier)
        ":_Peer",
    ],
)

#############
ocaml_module(
    name = "_Network_peer",
    src = "network_peer.ml",
    ns = ":Network_peer_ns",
    opts = NETWORK_PEER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_peer",
    ],
    deps = NETWORK_PEER_DEPS + [
        # do not sort (buildifier)
        ":_Envelope",
        ":_Peer",
    ],
)

#############
ocaml_module(
    name = "_Peer",
    src = "peer.ml",
    ns = ":Network_peer_ns",
    opts = NETWORK_PEER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_peer",
    ],
    deps = NETWORK_PEER_DEPS,
)

###############
ppx_executable(
    name = "ppx1.exe",
    lazy_deps = [
        "@opam//pkg:ppx_expect.collector",
        "@opam//pkg:yojson",
        "@opam//pkg:ppx_hash.runtime-lib",
        "@opam//pkg:ppx_deriving_yojson.runtime",
        "@opam//pkg:ppx_sexp_conv.runtime-lib",
        "@opam//pkg:ppx_deriving.runtime",
        "@opam//pkg:ppx_assert.runtime-lib",
        "@opam//pkg:ppx_compare.runtime-lib",
        "@opam//pkg:ppx_inline_test.runtime-lib",
        "@opam//pkg:ppx_bench.runtime-lib",
        "@opam//pkg:ppx_enumerate.runtime-lib",
        "@opam//pkg:ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:Driver",
    opts = [],
    visibility = [
        "//src/lib/network_peer:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda",
        "@opam//pkg:ppx_deriving.eq",
        "@opam//pkg:ppx_deriving_yojson",
        "@opam//pkg:ppx_jane",
        "@opam//pkg:ppxlib",
        "@ppx_version//src:ppx_version",
    ],
)
