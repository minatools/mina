load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_signature",
    "ocaml_module",
    "ocaml_ns_archive",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY NETWORK_PEER
################################################################
NETWORK_PEER_SIGNATURE_OPTS = []

NETWORK_PEER_MODULE_OPTS = []

NETWORK_PEER_DEPS = []
NETWORK_PEER_DEPS_OPAM = [
    "core",
    "async",
    "async_rpc_kernel",
]

#################
ocaml_ns_archive(
    name = "network_peer",
    submodules = [
        ":_Envelope",
        ":_Network_peer",
        ":_Peer",
    ],
    visibility = [
        "//visibility:public",
        # "//src/lib/mina_net2:__pkg__",
        # "//src/lib/node_addrs_and_ports:__pkg__",
        # "//src/lib/trust_system:__pkg__"
    ]
)

#############
ocaml_module(
    name = "_Envelope",
    sig  = ":_Envelope.cmi",
    opts = NETWORK_PEER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_peer",
    ],
    struct = "envelope.ml",
    deps = NETWORK_PEER_DEPS + [
        # do not sort (buildifier)
        ":_Peer",
    ],
    deps_opam = NETWORK_PEER_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Envelope.cmi",
    src = "envelope.mli",
    opts = NETWORK_PEER_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_peer",
    ],
    deps = NETWORK_PEER_DEPS + [
        # do not sort (buildifier)
        ":_Peer",
    ],
    deps_opam = NETWORK_PEER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Network_peer",
    opts = NETWORK_PEER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_peer",
    ],
    struct = "network_peer.ml",
    deps = NETWORK_PEER_DEPS + [
        # do not sort (buildifier)
        ":_Envelope",
        ":_Peer",
    ],
    deps_opam = NETWORK_PEER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Peer",
    opts = NETWORK_PEER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_peer",
    ],
    struct = "peer.ml",
    deps = NETWORK_PEER_DEPS,
    deps_opam = NETWORK_PEER_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/network_peer:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda:ppx_coda",
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_deriving.eq",
        "ppx_deriving_yojson",
        "ppx_jane",
        "ppxlib",
    ]
)
