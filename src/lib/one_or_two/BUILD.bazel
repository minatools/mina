load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY ONE_OR_TWO
################################################################
ONE_OR_TWO_SIGNATURE_OPTS = []

ONE_OR_TWO_MODULE_OPTS = []

ONE_OR_TWO_DEPS = []
ONE_OR_TWO_DEPS_OPAM = [
    # do not sort (buildifier)
    "core",
    "async",
]

#########
ocaml_ns_archive(
    name = "one_or_two",
    submodules = [
        ":_Intfs",
        ":_One_or_two",
    ],
    visibility = [
        "//visibility:public",
    ]
)

#############
ocaml_module(
    name = "_Intfs",
    opts = ONE_OR_TWO_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    struct = "intfs.ml",
    deps_opam = ONE_OR_TWO_DEPS_OPAM
)

#############
ocaml_module(
    name = "_One_or_two",
    sig  = ":_One_or_two.cmi",
    opts = ONE_OR_TWO_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    struct = "one_or_two.ml",
    deps = ONE_OR_TWO_DEPS + [
        # do not sort (buildifier)
        ":_Intfs",
    ],
    deps_opam = ONE_OR_TWO_DEPS_OPAM
)

################
ocaml_signature(
    name = "_One_or_two.cmi",
    src = "one_or_two.mli",
    opts = ONE_OR_TWO_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    deps = ONE_OR_TWO_DEPS + [
        # do not sort (buildifier)
        ":_Intfs",
    ],
    deps_opam = ONE_OR_TWO_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "yojson",
        "ppx_deriving_yojson.runtime",
        "ppx_deriving.runtime",
        "ppx_compare.runtime-lib",
        "bin_prot",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/one_or_two:__pkg__",
    ],
    deps = [
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_base",
        "ppx_bin_prot",
        "ppx_deriving.std",
        "ppx_deriving_yojson",
        "ppx_let",
        "ppxlib",
    ]
)

