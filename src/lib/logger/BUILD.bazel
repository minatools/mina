load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_signature",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_ns_library",
)

################################################################
## STANZA 1: LIBRARY LOGGER
################################################################
OPTS = ["-linkall"]

LOGGER_DEPS_OPAM = [
    "core",
    "async",
    "yojson",
    "ppx_deriving_yojson.runtime",
    "re2"
]

LOGGER_PPX = "@//bzl/ppx/exe:ppx_version__ppx_coda__ppx_jane__ppx_deriving.std__ppx_deriving_yojson"

LOGGER_PPX_ARGS = [
    # do not sort (buildifier)
    "-inline-test-lib",
    "logger",
]

#########
ocaml_ns_library(
    name = "logger",
    main = ":_Logger",
    opts = OPTS,
    submodules = [
        ":_Logger",
        ":_Impl",
        ":_Tags",
    ],
    visibility = [
        "//visibility:public"
    ],
)

#############
ocaml_module(
    name = "_Logger",
    struct = "logger.ml",
    opts = OPTS,
    ppx = LOGGER_PPX,
    ppx_args = LOGGER_PPX_ARGS,
    deps_opam = LOGGER_DEPS_OPAM,
    deps = [
        # do not sort (buildifier)
        ":_Impl",
    ],
    # visibility = ["//visibility:public"],
    visibility = [
        "//src/lib/cache_dir:__pkg__",
        "//src/lib/key_cache:__pkg__",
        "//src/lib/mina_metrics:__pkg__",
        "//src/lib/storage:__pkg__"
    ]
)

#############
ocaml_module(
    name = "_Impl",
    struct = "impl.ml",
    sig  = ":_Impl.cmi",
    opts = OPTS,
    ppx = LOGGER_PPX,
    ppx_args = LOGGER_PPX_ARGS,
    deps_opam = LOGGER_DEPS_OPAM,
    deps = [
        "@mina//src/lib/logproc_lib",
        ":_Tags",
    ],
)

################
ocaml_signature(
    name = "_Impl.cmi",
    src = "impl.mli",
    opts = OPTS,
    ppx = LOGGER_PPX,
    ppx_args = LOGGER_PPX_ARGS,
    deps_opam = LOGGER_DEPS_OPAM,
    deps = [
        # do not sort (buildifier)
        "@mina//src/lib/logproc_lib",
        "@mina//src/lib/structured_log_events",
        ":_Tags",
    ],
)

#############
ocaml_module(
    name = "_Tags",
    struct = "tags.ml",
    opts = OPTS,
    ppx = LOGGER_PPX,
    ppx_args = LOGGER_PPX_ARGS,
    deps_opam = LOGGER_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Test",
    ppx = LOGGER_PPX,
    ppx_args = LOGGER_PPX_ARGS,
    struct = "test.ml",
    deps_opam = LOGGER_DEPS_OPAM,
    deps = [
        # do not sort (buildifier)
        ":_Impl",
    ],
)
