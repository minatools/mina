load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ppx_executable",
)

load(
    "//:BUILD.bzl",
    "CONFIG_MLH",
)

################################################################
## STANZA 1: LIBRARY SNARK_PARAMS
################################################################
SNARK_PARAMS_MODULE_OPTS = ["-linkall"]

SNARK_PARAMS_DEPS = [
    # do not sort (buildifier)
    "@snarky//sponge",
    "@snarky//group_map",
    "@snarky//fold_lib",
    "@mina//src/lib/o1trace",
    "@snarky//tuple_lib",
    "@snarky//bitstring_lib",
    "@mina//src/lib/snarky_group_map",
    "@snarky//src/base:snarky_backendless",
    "@mina//src/lib/snarky_curves",
    "@mina//src/lib/snark_bits",
    "@mina//src/lib/pickles",
    "@mina//src/lib/crypto_params",
]

SNARK_PARAMS_DEPS_OPAM = [
    "digestif.c",
    "core_kernel",
]

#################
ocaml_ns_library(
    name = "snark_params",
    main = "_Snark_params",
    submodules = [
        ":_Snark_params",
        # ":_Snark_intf",
        # ":_Snark_util"
    ],
    visibility = [
        "//visibility:public",
        # "//src/lib/block_time:__pkg__",
        # "//src/lib/coda_numbers:__pkg__",
        # "//src/lib/currency:__pkg__",
        # "//src/lib/data_hash_lib:__pkg__",
        # "//src/lib/hash_prefix_states:__pkg__",
        # "//src/lib/non_zero_curve_point:__pkg__",
        # "//src/lib/outside_hash_image:__pkg__",
        # "//src/lib/rc_pool:__pkg__",
        # "//src/lib/rosetta_coding:__pkg__",
        # "//src/lib/sgn:__pkg__",
        # "//src/lib/signature_lib:__pkg__",
        # "//src/lib/test_util:__pkg__",
        # "//src/lib/unsigned_extended:__pkg__",
    ],
)

#############
ocaml_module(
    name = "_Snark_params",
    struct = "snark_params.ml",
    opts = SNARK_PARAMS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snark_params",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = SNARK_PARAMS_DEPS_OPAM,
    deps = SNARK_PARAMS_DEPS + [
        # do not sort (buildifier)
        ":_Snark_intf",
        ":_Snark_util",
    ],
)

#############
ocaml_module(
    name = "_Snark_intf",
    struct = "snark_intf.ml",
    opts = SNARK_PARAMS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snark_params",
    ],
    ppx_data = CONFIG_MLH,
    deps = SNARK_PARAMS_DEPS,
    deps_opam = SNARK_PARAMS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Snark_util",
    struct = "snark_util.ml",
    opts = SNARK_PARAMS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snark_params",
    ],
    ppx_data = CONFIG_MLH,
    deps = SNARK_PARAMS_DEPS,
    deps_opam = SNARK_PARAMS_DEPS_OPAM,
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "yojson",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "bin_prot",
        "ppx_bench.runtime-lib",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    deps = [
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:ppx_version",
        "@snarky//ppx:ppx_snarky",
    ],
    deps_opam = [
        "ppx_assert",
        "ppx_base",
        "ppx_bench",
        "ppx_bin_prot",
        "ppx_custom_printf",
        "ppx_deriving.std",
        "ppx_deriving_yojson",
        "ppx_inline_test",
        "ppx_let",
        "ppx_sexp_conv",
        "ppxlib",
    ]
)
