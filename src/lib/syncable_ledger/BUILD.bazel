load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ppx_executable",
)

#################
ocaml_ns_library(
    name = "#syncable_ledger",
    submodules = [
        ":_Syncable_ledger",
    ],
    visibility = [
        "//visibility:public",
    ],
)

#############
ocaml_module(
    name = "_Syncable_ledger",
    struct = "syncable_ledger.ml",
    opts   = ["-linkall"],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "syncable_ledger",
    ],
    visibility = ["//visibility:public"],
    deps = [
        # "@ppx_version//src/runtime:#ppx_version_runtime",
        "@mina//src/lib/pipe_lib:#pipe_lib",
        "@mina//src/lib/merkle_ledger:#merkle_ledger",
        "@mina//src/lib/logger:#logger",
        "@mina//src/lib/trust_system:#trust_system",
        "@mina//src/lib/interruptible:#interruptible",
    ],
    deps_opam = [
        "core",
        "async",
        "async_extra",
    ]
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    # deps_adjunct = ["@ppx_version//src/runtime:#ppx_version_runtime"],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/syncable_ledger:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda:#ppx_coda",
        "@mina//src/lib/ppx_register_event:#ppx_register_event",
        "@ppx_version//src:#ppx_version",
    ],
    deps_opam = [
        "ppx_jane",
        "ppxlib",
        "ppx_deriving_yojson",
        "ppx_deriving.eq",
    ]
)
