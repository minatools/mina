load("@io_bazel_rules_rust//rust:rust.bzl", "rust_library")
load("//bzl/config/rust:BUILD.bzl", "RUST_CRATE_TYPE", "RUST_PROFILE")

# $ (cd _build/default && /Users/gar/.opam/4.07.1/bin/ocamlopt.opt -w @1..3@5..28@30..39@43@46..47@49..57@61..62-40 -strict-sequence -strict-formats -short-paths -keep-locs -w -49 -nopervasives -nostdlib -g -I src/lib/marlin_plonk_bindings/stubs/.marlin_plonk_bindings_stubs.objs/byte -I src/lib/marlin_plonk_bindings/stubs/.marlin_plonk_bindings_stubs.objs/native -intf-suffix .ml-gen -no-alias-deps -opaque -o src/lib/marlin_plonk_bindings/stubs/.marlin_plonk_bindings_stubs.objs/native/marlin_plonk_bindings_stubs.cmx -c -impl src/lib/marlin_plonk_bindings/stubs/marlin_plonk_bindings_stubs.ml-gen)
 
## MacOS:  ["-C", "link-args=-Wl,-undefined,dynamic_lookup"]

rust_library(
    name = "marlin_plonk_stubs",
    visibility = ["//visibility:public"],
    edition = "2018",
    crate_type = RUST_CRATE_TYPE, # "staticlib",
    rustc_flags = RUST_PROFILE + [
        "-C", "target-feature=+bmi2,+adx",
    ] + select({
        "//bzl/host:macos": ["-C", "link-args=-Wl,-undefined,dynamic_lookup"],
        "//bzl/host:linux": []
    }, no_match_error = "Uknown platform. Only MacOS and Linux supported."),
    srcs = glob(["src/**/*.rs"]),
    deps = [
        "//bzl/external/rust:libc",
        "//bzl/external/rust:num_bigint",
        "//bzl/external/rust:ocaml",
        "//bzl/external/rust:rand",
        "//bzl/external/rust:rand_core",
        "//bzl/external/rust:rayon",
        "//bzl/external/rust:sprs",

        "@zexe//algebra",
        "@zexe//ff-fft",
        "@zexe//groupmap",

        "@marlin//oracle",
        "@marlin//dlog/commitment:commitment_dlog",
        "@marlin//dlog/marlin:marlin_protocol_dlog",
        "@marlin//dlog/plonk:plonk_protocol_dlog",
        "@marlin//dlog_solver",
        "@marlin//circuits/marlin:marlin_circuits",
        "@marlin//circuits/plonk:plonk_circuits",
        "@marlin//pairing/commitment:commitment_pairing",
        "@marlin//pairing/marlin:marlin_protocol_pairing",
    ],
    # crate_features = [
    #     "std",
    #     "ocaml::func"
    # ]
)
