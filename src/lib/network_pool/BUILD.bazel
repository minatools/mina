load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
    "ppx_executable",
)

CONFIG_MLH = ["//src:config"]

################################################################
## STANZA 1: LIBRARY NETWORK_POOL
################################################################
NETWORK_POOL_SIGNATURE_OPTS = []

NETWORK_POOL_MODULE_OPTS = []

NETWORK_POOL_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/one_or_two:one_or_two",
    "@mina//src/lib/pipe_lib:pipe_lib",
    "@mina//src/lib/quickcheck_lib:quickcheck_lib",
    "@mina//src/lib/verifier:verifier",
    "@mina//src/lib/mina_base:mina_base",
    "@mina//src/lib/ledger_proof:ledger_proof",
    "@mina//src/lib/transaction_snark:transaction_snark",
    "@mina//src/lib/transition_frontier:transition_frontier",
    "@mina//src/lib/consensus:consensus",
    "@mina//src/lib/mina_numbers:mina_numbers",
]

NETWORK_POOL_DEPS_OPAM = [
    "async",
    "core",
]

#################
ocaml_ns_archive(
    name = "network_pool",
    submodules = [
        ":_Batcher",
        ":_F_sequence",
        ":_Indexed_pool",
        ":_Intf",
        ":_Map_set",
        ":_Mocks",
        ":_Network_pool_base",
        ":_Priced_proof",
        ":_Rate_limiter",
        ":_Snark_pool",
        ":_Snark_pool_diff",
        # ":_Test",
        ":_Transaction_pool",
    ],
    visibility = [
        "//src/lib/block_producer:__pkg__",
        "//src/lib/gossip_net:__pkg__",
        "//src/lib/mina_networking:__pkg__",
        "//src/lib/transaction_inclusion_status:__pkg__",
        "//src/lib/work_selector:__pkg__"
    ]
)

#############
ocaml_module(
    name = "_Batcher",
    sig  = ":_Batcher.cmi",
    opts = NETWORK_POOL_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    struct = "batcher.ml",
    deps = NETWORK_POOL_DEPS,
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Batcher.cmi",
    src = "batcher.mli",
    opts = NETWORK_POOL_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    deps = NETWORK_POOL_DEPS,
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

#############
ocaml_module(
    name = "_F_sequence",
    sig  = ":_F_sequence.cmi",
    opts = NETWORK_POOL_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    struct = "f_sequence.ml",
    deps = NETWORK_POOL_DEPS,
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

################
ocaml_signature(
    name = "_F_sequence.cmi",
    src = "f_sequence.mli",
    opts = NETWORK_POOL_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    deps = NETWORK_POOL_DEPS,
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Indexed_pool",
    sig  = ":_Indexed_pool.cmi",
    opts = NETWORK_POOL_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    struct = "indexed_pool.ml",
    deps = NETWORK_POOL_DEPS + [
        # do not sort (buildifier)
        ":_F_sequence",
        ":_Map_set",
    ],
    deps_opam = NETWORK_POOL_DEPS_OPAM)


################
ocaml_signature(
    name = "_Indexed_pool.cmi",
    src = "indexed_pool.mli",
    opts = NETWORK_POOL_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    deps = NETWORK_POOL_DEPS,
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Intf",
    opts = NETWORK_POOL_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    struct = "intf.ml",
    deps = NETWORK_POOL_DEPS + [
        # do not sort (buildifier)
        ":_Priced_proof",
    ],
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Map_set",
    opts = NETWORK_POOL_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    struct = "map_set.ml",
    deps = NETWORK_POOL_DEPS,
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Mocks",
    opts = NETWORK_POOL_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    struct = "mocks.ml",
    deps = NETWORK_POOL_DEPS,
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Network_pool_base",
    opts = NETWORK_POOL_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    struct = "network_pool_base.ml",
    deps = NETWORK_POOL_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
        ":_Rate_limiter",
    ],
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Priced_proof",
    opts = NETWORK_POOL_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    struct = "priced_proof.ml",
    deps = NETWORK_POOL_DEPS,
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Rate_limiter",
    sig  = ":_Rate_limiter.cmi",
    opts = NETWORK_POOL_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    struct = "rate_limiter.ml",
    deps = NETWORK_POOL_DEPS,
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Rate_limiter.cmi",
    src = "rate_limiter.mli",
    opts = NETWORK_POOL_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    deps = NETWORK_POOL_DEPS,
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Snark_pool",
    sig  = ":_Snark_pool.cmi",
    opts = NETWORK_POOL_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    struct = "snark_pool.ml",
    deps = NETWORK_POOL_DEPS + [
        # do not sort (buildifier)
        ":_Batcher",
        ":_Intf",
        ":_Network_pool_base",
        ":_Priced_proof",
        ":_Snark_pool_diff",
    ],
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Snark_pool.cmi",
    src = "snark_pool.mli",
    opts = NETWORK_POOL_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    deps = NETWORK_POOL_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
        ":_Mocks",  # obazl:retain
    ],
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Snark_pool_diff",
    opts = NETWORK_POOL_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    struct = "snark_pool_diff.ml",
    deps = NETWORK_POOL_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
        ":_Priced_proof",
    ],
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Test",
    opts = NETWORK_POOL_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    struct = "test.ml",
    deps = NETWORK_POOL_DEPS + [
        ":_Mocks",  # obazl:retain
        ":_Snark_pool",  # obazl:retain
    ],
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Transaction_pool",
    struct = "transaction_pool.ml",
    opts = NETWORK_POOL_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "network_pool",
    ],
    ppx_data = CONFIG_MLH,
    deps = NETWORK_POOL_DEPS + [
        # do not sort (buildifier)
        ":_Batcher",
        ":_Indexed_pool",
        ":_Intf",
        ":_Mocks",
        ":_Network_pool_base",
    ],
    deps_opam = NETWORK_POOL_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "yojson",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "bin_prot",
        "fieldslib",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/network_pool:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda:ppx_coda",
        # "@mina//src/lib/ppx_register_event:ppx_register_event",
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:ppx_version",
        "@snarky//ppx:ppx_snarky",
    ],
    deps_opam = [
        "ppx_assert",
        "ppx_base",
        "ppx_bin_prot",
        "ppx_custom_printf",
        "ppx_deriving.std",
        "ppx_deriving_yojson",
        "ppx_fields_conv",
        "ppx_inline_test",
        "ppx_let",
        "ppx_pipebang",
        "ppx_sexp_conv",
        "ppxlib",
    ]
)
