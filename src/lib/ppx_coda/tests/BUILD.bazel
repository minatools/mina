load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ppx_executable",
)

#############
ocaml_module(
    name = "unexpired",
    opts = [],
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "unexpired",
    ],
    struct = "unexpired.ml",
    visibility = ["//visibility:public"],
    deps = [],
)

#############
ocaml_module(
    name = "define_locally_good",
    opts = [],
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "define_locally_good",
    ],
    struct = "define_locally_good.ml",
    visibility = ["//visibility:public"],
    deps = [],
)

#############
ocaml_module(
    name = "define_from_scope_good",
    opts = [],
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "define_from_scope_good",
    ],
    struct = "define_from_scope_good.ml",
    visibility = ["//visibility:public"],
    deps = [],
)

#############
ocaml_module(
    name = "expired",
    opts = [],
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "expired",
    ],
    struct = "expired.ml",
    visibility = ["//visibility:public"],
    deps = [],
)

#############
ocaml_module(
    name = "expiry_in_module",
    opts = [],
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "expiry_in_module",
    ],
    struct = "expiry_in_module.ml",
    visibility = ["//visibility:public"],
    deps = [],
)

#############
ocaml_module(
    name = "expiry_invalid_date",
    opts = [],
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "expiry_invalid_date",
    ],
    struct = "expiry_invalid_date.ml",
    visibility = ["//visibility:public"],
    deps = [],
)

#############
ocaml_module(
    name = "expiry_invalid_format",
    opts = [],
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "expiry_invalid_format",
    ],
    struct = "expiry_invalid_format.ml",
    visibility = ["//visibility:public"],
    deps = [],
)

###############
ppx_executable(
    name = "ppx.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = ["//src/lib/ppx_coda/tests:__pkg__"],
    deps = [
        "@mina//src/lib/ppx_coda",
    ],
    deps_opam = [
        "ppx_deriving_yojson",
        "ppx_jane",
        "ppxlib",
    ]
)
