load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY DISTRIBUTED_DSL
################################################################
DISTRIBUTED_DSL_INTERFACE_OPTS = []

DISTRIBUTED_DSL_MODULE_OPTS = []

DISTRIBUTED_DSL_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/logger",
    "@mina//src/lib/pipe_lib",
]
DISTRIBUTED_DSL_DEPS_OPAM = [
    "core",
    "async",
    "async_extra",
]

#########
ocaml_ns_archive(
    name = "distributed_dsl",
    submodules = [
        ":_Distributed_dsl",
        ":_Node",
        ":_Test",
    ],
)

#############
ocaml_module(
    name = "_Distributed_dsl",
    sig  = ":_Distributed_dsl.cmi",
    opts = DISTRIBUTED_DSL_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "distributed_dsl",
    ],
    struct = "distributed_dsl.ml",
    deps = DISTRIBUTED_DSL_DEPS + [
        # do not sort (buildifier)
        ":_Node",
    ],
    deps_opam = DISTRIBUTED_DSL_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Distributed_dsl.cmi",
    src = "distributed_dsl.mli",
    opts = DISTRIBUTED_DSL_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "distributed_dsl",
    ],
    deps = DISTRIBUTED_DSL_DEPS + [
        # do not sort (buildifier)
        ":_Node",
    ],
    deps_opam = DISTRIBUTED_DSL_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Node",
    sig  = ":_Node.cmi",
    opts = DISTRIBUTED_DSL_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "distributed_dsl",
    ],
    struct = "node.ml",
    deps = DISTRIBUTED_DSL_DEPS,
    deps_opam = DISTRIBUTED_DSL_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Node.cmi",
    src = "node.mli",
    opts = DISTRIBUTED_DSL_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "distributed_dsl",
    ],
    deps = DISTRIBUTED_DSL_DEPS,
    deps_opam = DISTRIBUTED_DSL_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Test",
    opts = DISTRIBUTED_DSL_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "distributed_dsl",
    ],
    struct = "test.ml",
    deps = DISTRIBUTED_DSL_DEPS,
    deps_opam = DISTRIBUTED_DSL_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/distributed_dsl:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda",
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_deriving.enum",
        "ppx_deriving.eq",
        "ppx_deriving_yojson",
        "ppx_jane",
        "ppxlib",
    ]
)
