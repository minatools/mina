load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_signature",
    "ocaml_module",
)

DEPS_OPAM = [
    "async_kernel",
    "core_kernel",
]

#############
ocaml_module(
    name = "ledger_catchup",
    struct = "ledger_catchup.ml",
    sig = ":_Ledger_catchup.cmi",
    ppx = "//bzl/ppx/exe:ppx_coda__ppx_version__ppx_jane",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "ledger_catchup",
    ],
    deps = [
        "@mina//src/lib/coda_intf",
        "@mina//src/lib/consensus",
        "@mina//src/lib/fake_network",
        "@mina//src/lib/merkle_address",
        "@mina//src/lib/mina_base",
        "@mina//src/lib/mina_metrics",
        "@mina//src/lib/mina_networking",
        "@mina//src/lib/non_empty_list",
        "@mina//src/lib/pipe_lib",
        "@mina//src/lib/syncable_ledger",
        "@mina//src/lib/transition_chain_verifier",
        "@mina//src/lib/transition_frontier",
        "@mina//src/lib/transition_handler",
    ],
    deps_opam = DEPS_OPAM,
    visibility = [
        "//src/lib/transition_frontier_controller:__pkg__",
    ],
)

################
ocaml_signature(
    name = "_Ledger_catchup.cmi",
    src = "ledger_catchup.mli",
    ppx = "//bzl/ppx/exe:ppx_coda__ppx_version__ppx_jane",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "ledger_catchup",
    ],
    deps = [
        "@mina//src/lib/coda_intf",
        "@mina//src/lib/consensus",
        "@mina//src/lib/fake_network",
        "@mina//src/lib/merkle_address",
        "@mina//src/lib/mina_base",
        "@mina//src/lib/mina_metrics",
        "@mina//src/lib/mina_networking",
        "@mina//src/lib/non_empty_list",
        "@mina//src/lib/pipe_lib",
        "@mina//src/lib/syncable_ledger",
        "@mina//src/lib/transition_chain_verifier",
        "@mina//src/lib/transition_frontier",
        "@mina//src/lib/transition_handler",
    ],
    deps_opam = DEPS_OPAM
)
