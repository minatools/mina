load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_executable",
    "ocaml_module",
    "ocaml_ns_library",
    "ocaml_signature",
    "ppx_executable",
)

load(
    "//:BUILD.bzl",
    "CONFIG_MLH",
)

PPX_PRINT = "@ppx//print:binary"

################################################################
## STANZA 1: LIBRARY CONSENSUS
################################################################
CONSENSUS_INTERFACE_OPTS = []

CONSENSUS_MODULE_OPTS = []

CONSENSUS_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/snarky_taylor",
    "@mina//src/lib/mina_base",
    "@mina//src/lib/block_time",
    "@mina//src/lib/with_hash",
    "@mina//src/lib/test_genesis_ledger",
    "@mina//src/lib/snark_params",
    "@mina//src/lib/perf_histograms",
    "@mina//src/lib/rc_pool",
    "@mina//src/lib/test_util",
    "@mina//src/lib/vrf_lib",
    "@mina//src/lib/unix_timestamp",
    "@mina//src/lib/global_signer_private_key",
    "@mina//src/lib/non_zero_curve_point",
    "@mina//src/lib/mina_metrics",
    "@mina//src/lib/graphql_lib",
    "@mina//src/lib/inline_test_quiet_logs",
]

CONSENSUS_DEPS_OPAM = [
    "core_kernel",
    "yojson",
]

#################
ocaml_ns_library(
    name = "consensus",
    main = "_Consensus",
    submodules = [
        ":_Consensus",
        ":_Constants",
        ":_Epoch",
        ":_Genesis_epoch_data",
        ":_Global_slot",
        ":_Global_sub_window",
        ":_Intf",
        ":_Num_util",
        ":_Proof_of_stake",
        ":_Slot",
        ":_Stake_proof",
        ":_Sub_window",
    ],
    visibility = [
        "//visibility:public",
    ]
)

#############
ocaml_module(
    name = "_Consensus",
    struct = "consensus.ml",
    sig  = ":_Consensus.cmi",
    opts = CONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "consensus",
    ],
    ppx_data = CONFIG_MLH,
    deps = CONSENSUS_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
        ":_Proof_of_stake",
    ],
    deps_opam = CONSENSUS_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Consensus.cmi",
    src = "consensus.mli",
    opts = CONSENSUS_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "consensus",
    ],
    ppx_data = CONFIG_MLH,
    deps = CONSENSUS_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
        ":_Proof_of_stake",
    ],
    deps_opam = CONSENSUS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Constants",
    struct = "constants.ml",
    opts = CONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "consensus",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    deps = CONSENSUS_DEPS,
    deps_opam = CONSENSUS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Epoch",
    opts = CONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "consensus",
    ],
    ppx_data = CONFIG_MLH,
    struct = "epoch.ml",
    deps = CONSENSUS_DEPS + [
        # do not sort (buildifier)
        ":_Constants",
        ":_Num_util",
        ":_Slot",
    ],
    deps_opam = CONSENSUS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Genesis_epoch_data",
    opts = CONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "consensus",
    ],
    ppx_data = CONFIG_MLH,
    struct = "genesis_epoch_data.ml",
    deps = CONSENSUS_DEPS,
    deps_opam = CONSENSUS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Global_slot",
    sig  = ":_Global_slot.cmi",
    opts = CONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "consensus",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "global_slot.ml",
    deps = CONSENSUS_DEPS + [
        # do not sort (buildifier)
        ":_Constants",
        ":_Epoch",
        ":_Slot",
    ],
    deps_opam = CONSENSUS_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Global_slot.cmi",
    src = "global_slot.mli",
    opts = CONSENSUS_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "consensus",
    ],
    ppx_data = CONFIG_MLH,
    deps = CONSENSUS_DEPS + [
        # do not sort (buildifier)
        ":_Constants",
        ":_Epoch",
        ":_Slot",
    ],
    deps_opam = CONSENSUS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Global_sub_window",
    sig  = ":_Global_sub_window.cmi",
    opts = CONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "consensus",
    ],
    ppx_data = CONFIG_MLH,
    struct = "global_sub_window.ml",
    deps = CONSENSUS_DEPS + [
        # do not sort (buildifier)
        ":_Constants",
        ":_Global_slot",
        ":_Sub_window",
    ],
    deps_opam = CONSENSUS_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Global_sub_window.cmi",
    src = "global_sub_window.mli",
    opts = CONSENSUS_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "consensus",
    ],
    ppx_data = CONFIG_MLH,
    deps = CONSENSUS_DEPS + [
        # do not sort (buildifier)
        ":_Constants",
        ":_Global_slot",
        ":_Sub_window",
    ],
    deps_opam = CONSENSUS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Intf",
    opts = CONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "consensus",
    ],
    ppx_data = CONFIG_MLH,
    struct = "intf.ml",
    deps = CONSENSUS_DEPS + [
        # do not sort (buildifier)
        ":_Constants",
        ":_Global_slot",
        ":_Slot",
    ],
    deps_opam = CONSENSUS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Num_util",
    opts = CONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "consensus",
    ],
    ppx_data = CONFIG_MLH,
    struct = "num_util.ml",
    deps = CONSENSUS_DEPS,
    deps_opam = CONSENSUS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Proof_of_stake",
    sig  = ":_Proof_of_stake.cmi",
    opts = CONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "consensus",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "proof_of_stake.ml",
    deps = CONSENSUS_DEPS + [
        # do not sort (buildifier)
        ":_Constants",
        ":_Epoch",
        ":_Genesis_epoch_data",
        ":_Global_slot",
        ":_Global_sub_window",
        ":_Intf",
        ":_Num_util",
        ":_Slot",
        ":_Stake_proof",
        ":_Sub_window",
    ],
    deps_opam = CONSENSUS_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Proof_of_stake.cmi",
    src = "proof_of_stake.mli",
    opts = CONSENSUS_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "consensus",
    ],
    ppx_data = CONFIG_MLH,
    deps = CONSENSUS_DEPS + [
        # do not sort (buildifier)
        ":_Global_slot",
        ":_Intf",
    ],
    deps_opam = CONSENSUS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Slot",
    opts = CONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "consensus",
    ],
    ppx_data = CONFIG_MLH,
    struct = "slot.ml",
    deps = CONSENSUS_DEPS + [
        # do not sort (buildifier)
        ":_Constants",
    ],
    deps_opam = CONSENSUS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Stake_proof",
    opts = CONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "consensus",
    ],
    ppx_data = CONFIG_MLH,
    struct = "stake_proof.ml",
    deps = CONSENSUS_DEPS,
    deps_opam = CONSENSUS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Sub_window",
    opts = CONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "consensus",
    ],
    ppx_data = CONFIG_MLH,
    struct = "sub_window.ml",
    deps = CONSENSUS_DEPS,
    deps_opam = CONSENSUS_DEPS_OPAM
)

################################################################
## STANZA 2: EXECUTABLE PROOF_OF_STAKE_FUZZER
################################################################
PROOF_OF_STAKE_FUZZER_EXECUTABLE_OPTS = []

PROOF_OF_STAKE_FUZZER_INTERFACE_OPTS = []

PROOF_OF_STAKE_FUZZER_MODULE_OPTS = []

PROOF_OF_STAKE_FUZZER_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/signature_lib",
    "@mina//src/lib/coda_state",
    "@mina//src/lib/coda_transition",
    "@mina//src/lib/consensus",
    "@mina//src/lib/prover",
    "@mina//src/lib/blockchain_snark",
]

PROOF_OF_STAKE_FUZZER_DEPS_OPAM = [
    "core_kernel",
]

PROOF_OF_STAKE_FUZZER_PPX = "@//bzl/ppx/exe:ppx_version__ppx_jane"

PROOF_OF_STAKE_FUZZER_PPX_ARGS = [
    # do not sort (buildifier)
    "-inline-test-lib",
    "proof_of_stake_fuzzer",
]

#################
ocaml_executable(
    name = "proof_of_stake_fuzzer.exe",
    opts = PROOF_OF_STAKE_FUZZER_EXECUTABLE_OPTS,
    visibility = ["//visibility:public"],
    deps = PROOF_OF_STAKE_FUZZER_DEPS + [
        # do not sort (buildifier)
        ":_Proof_of_stake_fuzzer",
    ],
    deps_opam = PROOF_OF_STAKE_FUZZER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Proof_of_stake_fuzzer",
    opts = PROOF_OF_STAKE_FUZZER_MODULE_OPTS,
    ppx = PROOF_OF_STAKE_FUZZER_PPX,
    ppx_args = PROOF_OF_STAKE_FUZZER_PPX_ARGS,
    ppx_data = CONFIG_MLH,
    struct = "proof_of_stake_fuzzer.ml",
    deps = PROOF_OF_STAKE_FUZZER_DEPS,
    deps_opam = PROOF_OF_STAKE_FUZZER_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "yojson",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "bin_prot",
        "fieldslib",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/consensus:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda",
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:ppx_version",
        "@snarky//h_list/ppx:ppx_h_list",
        "@snarky//ppx:ppx_snarky",
    ],
    deps_opam = [
        "ppx_assert",
        "ppx_base",
        "ppx_bin_prot",
        "ppx_custom_printf",
        "ppx_deriving.std",
        "ppx_deriving_yojson",
        "ppx_fields_conv",
        "ppx_inline_test",
        "ppx_let",
        "ppx_sexp_conv",
        "ppxlib",
    ]
)
