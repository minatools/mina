load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_archive",
    "ppx_executable",
)

CONFIG_MLH = ["//src:config"]

#################
ocaml_ns_archive(
    name = "genesis_ledger_helper",
    submodules = [
        ":_Genesis_ledger_helper",
    ],
    visibility = [
        "//visibility:public",
    ],
)

#############
ocaml_module(
    name = "_Genesis_ledger_helper",
    struct = "genesis_ledger_helper.ml",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "genesis_ledger_helper",
    ],
    ppx_data = CONFIG_MLH,
    visibility = ["//visibility:public"],
    deps = [
        "@mina//src/lib/cache_dir:cache_dir",
        "@mina//src/lib/genesis_constants:genesis_constants",
        "@mina//src/lib/genesis_ledger:genesis_ledger",
        "@mina//src/lib/genesis_proof:genesis_proof",
        "@mina//src/lib/mina_base:mina_base",
        "@mina//src/lib/precomputed_values:precomputed_values",
        "@mina//src/lib/runtime_config:runtime_config",
        "@mina//src/lib/signature_lib:signature_lib",
        "@mina//src/lib/snark_keys:snark_keys",
    ],
    deps_opam = [
        "core_kernel",
    ]
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    visibility = [
        "//src/lib/genesis_ledger_helper:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda:ppx_coda",
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_jane",
        "ppx_custom_printf",
        "ppx_deriving_yojson",
        "ppx_deriving.std",
        "ppx_inline_test",
        "ppx_let",
    ]
)
