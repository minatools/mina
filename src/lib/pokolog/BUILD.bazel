load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
)

################################################################
## STANZA 1: LIBRARY POKOLOG
################################################################
POKOLOG_MODULE_OPTS = []

POKOLOG_DEPS = [
    # do not sort (buildifier)
    "@snarky//src/base:snarky_backendless",
]
POKOLOG_DEPS_OPAM = ["core_kernel"]

POKOLOG_PPX = "@//bzl/ppx/exe:ppx_version__ppx_jane__ppx_deriving.eq"

POKOLOG_PPX_ARGS = [
    # do not sort (buildifier)
    "-inline-test-lib",
    "pokolog",
]

#########
ocaml_ns_library(
    name = "#pokolog",
    submodules = [
        ":_Group_intf",
        ":_Hash_intf",
        ":_Inputs_intf",
        ":_Intf",
        ":_Pokolog",
        ":_Proof",
        ":_Scalar_intf",
        ":_Variable_base_instance",
    ],
)

#############
ocaml_module(
    name = "_Group_intf",
    opts = POKOLOG_MODULE_OPTS,
    ppx = POKOLOG_PPX,
    ppx_args = POKOLOG_PPX_ARGS,
    struct = "group_intf.ml",
    deps = POKOLOG_DEPS + [
        # do not sort (buildifier)
        ":_Scalar_intf",
    ],
    deps_opam = POKOLOG_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Hash_intf",
    opts = POKOLOG_MODULE_OPTS,
    ppx = POKOLOG_PPX,
    ppx_args = POKOLOG_PPX_ARGS,
    struct = "hash_intf.ml",
    deps = POKOLOG_DEPS + [
        # do not sort (buildifier)
        ":_Group_intf",
        ":_Scalar_intf",
    ],
    deps_opam = POKOLOG_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Inputs_intf",
    opts = POKOLOG_MODULE_OPTS,
    ppx = POKOLOG_PPX,
    ppx_args = POKOLOG_PPX_ARGS,
    struct = "inputs_intf.ml",
    deps = POKOLOG_DEPS + [
        # do not sort (buildifier)
        ":_Group_intf",
        ":_Hash_intf",
        ":_Scalar_intf",
    ],
    deps_opam = POKOLOG_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Intf",
    opts = POKOLOG_MODULE_OPTS,
    ppx = POKOLOG_PPX,
    ppx_args = POKOLOG_PPX_ARGS,
    struct = "intf.ml",
    deps = POKOLOG_DEPS + [
        # do not sort (buildifier)
        ":_Inputs_intf",
        ":_Proof",
        ":_Variable_base_instance",
    ],
    deps_opam = POKOLOG_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Pokolog",
    opts = POKOLOG_MODULE_OPTS + [
        "-w",
        "-22",  # Preprocessor warning:  Must have deriving version if deriving bin_io
    ],
    ppx = POKOLOG_PPX,
    ppx_args = POKOLOG_PPX_ARGS,
    struct = "pokolog.ml",
    deps = POKOLOG_DEPS + [
        # do not sort (buildifier)
        ":_Inputs_intf",
        ":_Intf",
        ":_Proof",
        ":_Variable_base_instance",
    ],
    deps_opam = POKOLOG_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Proof",
    opts = POKOLOG_MODULE_OPTS + [
        "-w",
        "-22",  # Preprocessor warning:  Must have deriving version if deriving bin_io
    ],
    ppx = POKOLOG_PPX,
    ppx_args = POKOLOG_PPX_ARGS,
    struct = "proof.ml",
    deps = POKOLOG_DEPS,
    deps_opam = POKOLOG_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Scalar_intf",
    opts = POKOLOG_MODULE_OPTS,
    ppx = POKOLOG_PPX,
    ppx_args = POKOLOG_PPX_ARGS,
    struct = "scalar_intf.ml",
    deps = POKOLOG_DEPS,
    deps_opam = POKOLOG_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Variable_base_instance",
    opts = POKOLOG_MODULE_OPTS + [
        "-w", "-22",  # Preprocessor warning:  Must have deriving version if deriving bin_io
    ],
    ppx = POKOLOG_PPX,
    ppx_args = POKOLOG_PPX_ARGS,
    struct = "variable_base_instance.ml",
    deps = POKOLOG_DEPS,
    deps_opam = POKOLOG_DEPS_OPAM
)
