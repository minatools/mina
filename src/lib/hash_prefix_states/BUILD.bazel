load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ocaml_signature",
    "ppx_executable",
)

load(
    "//:BUILD.bzl",
    "CONFIG_MLH",
)

#########
ocaml_ns_library(
    name = "hash_prefix_states",
    main = ":_Hash_prefix_states",
    submodules = [
        ":_Hash_prefix_states",
    ],
    visibility = [
        "//visibility:public"
    ],
)

#############
ocaml_module(
    name = "_Hash_prefix_states",
    struct = "hash_prefix_states.ml",
    sig = ":_Hash_prefix_states.cmi",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "hash_prefix_states",
    ],
    ppx_data = CONFIG_MLH,
    visibility = ["//visibility:public"],
    deps = [
        "@mina//src/lib/coda_compile_config",
        "@mina//src/lib/random_oracle",
        "@mina//src/lib/snark_params",
    ],
)

################
ocaml_signature(
    name = "_Hash_prefix_states.cmi",
    src = "hash_prefix_states.mli",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "hash_prefix_states",
    ],
    ppx_data = CONFIG_MLH,
    deps = [
        "@mina//src/lib/coda_compile_config",
        "@mina//src/lib/random_oracle",
        "@mina//src/lib/snark_params",
    ],
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "yojson",
        "ppx_deriving_yojson.runtime",
        "ppx_deriving.runtime",
        "ppx_inline_test.runtime-lib",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    visibility = [
        "//src/lib/hash_prefix_states:__pkg__",
    ],
    deps = [
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:ppx_version",
        "@snarky//ppx:ppx_snarky",
    ],
    deps_opam = [
        "ppx_deriving.eq",
        "ppx_deriving_yojson",
        "ppx_inline_test",
        "ppxlib",
    ]
)
