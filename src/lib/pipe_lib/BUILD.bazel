load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_signature",
    "ocaml_module",
    "ocaml_ns_library",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY PIPE_LIB
################################################################
PIPE_LIB_SIGNATURE_OPTS = []

PIPE_LIB_MODULE_OPTS = []

PIPE_LIB_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/o1trace:#o1trace",
    "@mina//src/lib/logger:#logger",
]

PIPE_LIB_DEPS_OPAM = [
    "core_kernel",
    "async",
]

#################
ocaml_ns_library(
    name = "#pipe_lib",
    submodules = [
        ":_Broadcast_pipe",
        ":_Linear_pipe",
        ":_Strict_pipe",
    ],
    visibility = [
        "//src/lib/block_producer:__pkg__",
        "//src/lib/bootstrap_controller:__pkg__",
        "//src/lib/child_processes:__pkg__",
        "//src/lib/downloader:__pkg__",
        "//src/lib/mina_incremental:__pkg__",
        "//src/lib/mina_net2:__pkg__",
        "//src/lib/distributed_dsl:__pkg__",
        "//src/lib/gossip_net:__pkg__",
        "//src/lib/integration_test_cloud_engine:__pkg__",
        "//src/lib/ledger_catchup:__pkg__",
        "//src/lib/mina_lib:__pkg__",
        "//src/lib/network_pool:__pkg__",
        "//src/lib/otp_lib:__pkg__",
        "//src/lib/parallel_scan:__pkg__",
        "//src/lib/pipe_lib:__pkg__",
        "//src/lib/staged_ledger:__pkg__",
        "//src/lib/syncable_ledger:__pkg__",
        "//src/lib/transaction_snark_scan_state:__pkg__",
        "//src/lib/transition_frontier/extensions:__pkg__",
        "//src/lib/transition_handler:__pkg__",
        "//src/lib/transition_router:__pkg__",
        "//src/lib/trust_system:__pkg__",
        "//src/lib/web_client_pipe:__pkg__",
    ],
)

#############
ocaml_module(
    name = "_Broadcast_pipe",
    opts = PIPE_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "pipe_lib",
    ],
    sig = ":_Broadcast_pipe.cmi",
    struct = "broadcast_pipe.ml",
    deps = PIPE_LIB_DEPS,
    deps_opam = PIPE_LIB_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Broadcast_pipe.cmi",
    src = "broadcast_pipe.mli",
    opts = PIPE_LIB_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "pipe_lib",
    ],
    deps = PIPE_LIB_DEPS,
    deps_opam = PIPE_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Linear_pipe",
    opts = PIPE_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "pipe_lib",
    ],
    sig = ":_Linear_pipe.cmi",
    struct = "linear_pipe.ml",
    deps = PIPE_LIB_DEPS,
    deps_opam = PIPE_LIB_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Linear_pipe.cmi",
    src = "linear_pipe.mli",
    opts = PIPE_LIB_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "pipe_lib",
    ],
    deps = PIPE_LIB_DEPS,
    deps_opam = PIPE_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Strict_pipe",
    opts = PIPE_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "pipe_lib",
    ],
    sig = ":_Strict_pipe.cmi",
    struct = "strict_pipe.ml",
    deps = PIPE_LIB_DEPS + [
        # do not sort (buildifier)
        ":_Linear_pipe",
    ],
    deps_opam = PIPE_LIB_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Strict_pipe.cmi",
    src = "strict_pipe.mli",
    opts = PIPE_LIB_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "pipe_lib",
    ],
    deps = PIPE_LIB_DEPS + [
        # do not sort (buildifier)
        ":_Linear_pipe",
    ],
    deps_opam = PIPE_LIB_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "ppx_hash.runtime-lib",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/pipe_lib:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda:#ppx_coda",
        "@ppx_version//src:#ppx_version",
    ],
    deps_opam = [
        "ppx_deriving.make",
        "ppx_jane",
        "ppxlib",
    ]
)
