load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_genrule",
    "ocaml_module",
    "ocaml_ns_library",
    "ppx_executable",
)

#################
ocaml_ns_library(
    name = "crypto_params",
    main = ":_Crypto_params",
    submodules = [
        ":_Crypto_params",
    ],
    visibility = [
        "//visibility:public",
    ],
)

#############
ocaml_module(
    name = "_Crypto_params",
    opts = [],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "crypto_params",
    ],
    struct = "crypto_params.ml",
    deps = [
        "@mina//src/lib/bignum_bigint",
        "@mina//src/lib/bowe_gabizon_hash",
        "@mina//src/lib/cache_dir",
        "@mina//src/lib/hash_prefixes",
        "@mina//src/lib/pickles",
        "@mina//src/lib/random_oracle",
        "@snarky//group_map",
        "@snarky//src/base:snarky_backendless",
        "@snarky//tuple_lib",
        ":_Group_map_params"
    ],
)

ocaml_module(
    name = "_Group_map_params",
    struct = ":gensrcs", # group_map_params.ml",
    opts = [],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "crypto_params",
    ],
    deps = [
        "@mina//src/lib/pickles",
        "@snarky//group_map",
    ],
)

############################################
TOOL = "//src/lib/crypto_params/gen:gen.exe"

##############
ocaml_genrule(
    name = "gensrcs",
    out = "group_map_params.ml",
    cmd = "\n".join([
        "$(location {tool});".format( tool = TOOL ),
        "cp group_map_params.ml $(location group_map_params.ml)",
    ]),
    tools = [TOOL],
    visibility = ["//visibility:public"],
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "ppx_hash.runtime-lib",
        "ppx_sexp_conv.runtime-lib",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/crypto_params:__pkg__",
    ],
    deps = [
        "@ppx_version//src:ppx_version",
        "@snarky//h_list/ppx:ppx_h_list",
    ],
    deps_opam = [
        "ppx_jane",
        "ppxlib",
    ]
)
