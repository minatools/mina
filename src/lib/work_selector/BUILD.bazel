load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
    "ppx_executable",
)

CONFIG_MLH = ["//src:config"]

################################################################
## STANZA 1: LIBRARY WORK_SELECTOR
################################################################
WORK_SELECTOR_SIGNATURE_OPTS = []

WORK_SELECTOR_MODULE_OPTS = []

WORK_SELECTOR_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/debug_assert:debug_assert",
    "@mina//src/lib/logger:logger",
    "@mina//src/lib/mina_intf:mina_intf",
    "@mina//src/lib/unix_timestamp:unix_timestamp",
    "@mina//src/lib/staged_ledger:staged_ledger",
    "@mina//src/lib/network_pool:network_pool",
]
WORK_SELECTOR_DEPS_OPAM = [
    "core",
    "async",
    "async_extra",
]

#########
ocaml_ns_archive(
    name = "work_selector",
    submodules = [
        ":_Inputs",
        ":_Intf",
        ":_Random",
        ":_Sequence",
        ":_Test",
        ":_Work_lib",
        ":_Work_selector",
    ],
    visibility = [
        "//src/lib/cli_lib:__pkg__",
        "//src/lib/mina_lib:__pkg__"
    ],
)

#############
ocaml_module(
    name = "_Inputs",
    opts = WORK_SELECTOR_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "work_selector",
    ],
    ppx_data = CONFIG_MLH,
    struct = "inputs.ml",
    deps = WORK_SELECTOR_DEPS,
    deps_opam = WORK_SELECTOR_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Intf",
    opts = WORK_SELECTOR_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "work_selector",
    ],
    ppx_data = CONFIG_MLH,
    struct = "intf.ml",
    deps = WORK_SELECTOR_DEPS,
    deps_opam = WORK_SELECTOR_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Random",
    sig  = ":_Random.cmi",
    opts = WORK_SELECTOR_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "work_selector",
    ],
    ppx_data = CONFIG_MLH,
    struct = "random.ml",
    deps = WORK_SELECTOR_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
    ],
    deps_opam = WORK_SELECTOR_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Random.cmi",
    src = "random.mli",
    opts = WORK_SELECTOR_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "work_selector",
    ],
    ppx_data = CONFIG_MLH,
    deps = WORK_SELECTOR_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
        ":_Test",  # obazl:retain
    ],
    deps_opam = WORK_SELECTOR_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Sequence",
    sig  = ":_Sequence.cmi",
    opts = WORK_SELECTOR_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "work_selector",
    ],
    ppx_data = CONFIG_MLH,
    struct = "sequence.ml",
    deps = WORK_SELECTOR_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
        ":_Test",  # obazl:retain
    ],
    deps_opam = WORK_SELECTOR_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Sequence.cmi",
    src = "sequence.mli",
    opts = WORK_SELECTOR_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "work_selector",
    ],
    ppx_data = CONFIG_MLH,
    deps = WORK_SELECTOR_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
    ],
    deps_opam = WORK_SELECTOR_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Test",
    opts = WORK_SELECTOR_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "work_selector",
    ],
    ppx_data = CONFIG_MLH,
    struct = "test.ml",
    deps = WORK_SELECTOR_DEPS + [
        # do not sort (buildifier)
        ":_Inputs",
        ":_Intf",
        ":_Work_lib",
    ],
    deps_opam = WORK_SELECTOR_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Work_lib",
    opts = WORK_SELECTOR_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "work_selector",
    ],
    ppx_data = CONFIG_MLH,
    struct = "work_lib.ml",
    deps = WORK_SELECTOR_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
    ],
    deps_opam = WORK_SELECTOR_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Work_selector",
    sig  = ":_Work_selector.cmi",
    opts = WORK_SELECTOR_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "work_selector",
    ],
    ppx_data = CONFIG_MLH,
    struct = "work_selector.ml",
    deps = WORK_SELECTOR_DEPS + [
        # do not sort (buildifier)
        ":_Inputs",
        ":_Intf",
        ":_Random",
        ":_Sequence",
        ":_Work_lib",
    ],
    deps_opam = WORK_SELECTOR_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Work_selector.cmi",
    src = "work_selector.mli",
    opts = WORK_SELECTOR_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "work_selector",
    ],
    ppx_data = CONFIG_MLH,
    deps = WORK_SELECTOR_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
    ],
    deps_opam = WORK_SELECTOR_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "yojson",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "bin_prot",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    deps = [
        "@mina//src/lib/ppx_coda:ppx_coda",
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_assert",
        "ppx_base",
        "ppx_bin_prot",
        "ppx_custom_printf",
        "ppx_deriving.std",
        "ppx_deriving_yojson",
        "ppx_inline_test",
        "ppx_let",
        "ppx_sexp_conv",
        "ppxlib",
    ]
)
