load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY CHILD_PROCESSES
################################################################
CHILD_PROCESSES_SIGNATURE_OPTS = []

CHILD_PROCESSES_MODULE_OPTS = []

CHILD_PROCESSES_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/file_system:file_system",
    "@mina//src/lib/error_json:error_json",
    "@mina//src/lib/logger:logger",
    "@mina//src/lib/pipe_lib:pipe_lib",
]

CHILD_PROCESSES_DEPS_OPAM = [
    "async",
    "core",
    "ctypes",
    "ctypes.foreign",
]

#########
ocaml_ns_archive(
    name = "child_processes",
    submodules = [
        ":_Child_processes",
        ":_Syslimits",
        ":_Termination"
    ],
    visibility = [
        "//visibility:public",
        # "//src/lib/mina_net2:__pkg__"
    ]
)

#############
ocaml_module(
    name = "_Child_processes",
    sig  = ":_Child_processes.cmi",
    opts = CHILD_PROCESSES_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "child_processes",
    ],
    struct = "child_processes.ml",
    deps = CHILD_PROCESSES_DEPS + [
        # do not sort (buildifier)
        ":_Syslimits",  # obazl:retain
        ":_Termination",
    ],
    deps_opam = CHILD_PROCESSES_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Child_processes.cmi",
    src = "child_processes.mli",
    opts = CHILD_PROCESSES_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "child_processes",
    ],
    deps = CHILD_PROCESSES_DEPS + [
        # do not sort (buildifier)
        ":_Termination",
    ],
    deps_opam = CHILD_PROCESSES_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Syslimits",
    opts = CHILD_PROCESSES_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "child_processes",
    ],
    struct = "syslimits.ml",
    deps = CHILD_PROCESSES_DEPS,
    deps_opam = CHILD_PROCESSES_DEPS_OPAM,
    cc_deps = {
        ":caml_syslimits": "default",
    },
)

###########
cc_library(
    name = "caml_syslimits",  # obazl:retain
    srcs = ["caml_syslimits.c"],
    copts = ["-I."],
    visibility = ["//visibility:public"],
    deps = [
        "@ocaml//csdk:hdrs",
    ],
)

#############
ocaml_module(
    name = "_Termination",
    opts = CHILD_PROCESSES_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "child_processes",
    ],
    struct = "termination.ml",
    deps = CHILD_PROCESSES_DEPS,
    deps_opam = CHILD_PROCESSES_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_inline_test.runtime-lib",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/child_processes:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda:ppx_coda",
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_assert",
        "ppx_custom_printf",
        "ppx_deriving.show",
        "ppx_inline_test",
        "ppx_let",
        "ppx_pipebang",
        "ppxlib",
    ]
)
