load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ocaml_signature",
)

load(
    "//:BUILD.bzl",
    "CONFIG_MLH",
)

PPX_PRINT = "@ppx//print:binary"

################################################################
## STANZA 1: LIBRARY CURRENCY
################################################################
CURRENCY_SIGNATURE_OPTS = []

CURRENCY_MODULE_OPTS = []

CURRENCY_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/ppx_dhall_type",
    "@mina//src/lib/coda_numbers",
    "@snarky//fold_lib",
    "@snarky//tuple_lib",
    "@mina//src/lib/snark_bits",
    "@mina//src/lib/sgn",
    "@mina//src/lib/snark_params",
    "@mina//src/lib/random_oracle",
    "@mina//src/lib/unsigned_extended",
    "@mina//src/lib/test_util",
    "@mina//src/lib/codable",
]

CURRENCY_DEPS_OPAM = [
    "core"
]

CURRENCY_PPX = "@//bzl/ppx/exe:ppx_coda__ppx_version__ppx_let__ppx_assert__ppx_bin_prot__ppx_sexp_conv__ppx_compare__ppx_hash__ppx_optcomp__ppx_custom_printf__ppx_deriving.std__ppx_deriving_yojson__h_list.ppx__ppx_inline_test"

CURRENCY_PPX_ARGS = [
    # do not sort (buildifier)
    "-inline-test-lib",
    "currency",
]

#########
ocaml_ns_library(
    name = "currency",
    main = "_Currency",
    submodules = [
        ":_Currency",
        ":_Intf",
        ":_Signed_poly",
    ],
    visibility = [
        "//visibility:public",
        # "//src/lib/coda_compile_config:__pkg__",
        # "//src/lib/coda_numbers:__pkg__",
        # "//src/lib/genesis_constants:__pkg__",
        # "//src/lib/quickcheck_lib:__pkg__",
        # "//src/lib/runtime_config:__pkg__"
    ]
)

#############
ocaml_module(
    name = "_Currency",
    sig  = ":_Currency.cmi",
    opts = CURRENCY_MODULE_OPTS + [
        "-w",
        "-32",  # Unused value declaration.
    ],
    ppx = CURRENCY_PPX,
    ppx_args = CURRENCY_PPX_ARGS,
    ppx_data = CONFIG_MLH,
    struct = "currency.ml",
    deps = CURRENCY_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
        ":_Signed_poly",
    ],
)

################
ocaml_signature(
    name = "_Currency.cmi",
    src = "currency.mli",
    opts = CURRENCY_SIGNATURE_OPTS + [
        "-w",
        "-32",  # unused value to_yojson, of_yojson, equal
    ],
    ppx = CURRENCY_PPX,
    ppx_args = CURRENCY_PPX_ARGS,
    ppx_data = CONFIG_MLH,
    deps = CURRENCY_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
        ":_Signed_poly",
    ],
)

#############
ocaml_module(
    name = "_Intf",
    opts = CURRENCY_MODULE_OPTS,
    ppx = CURRENCY_PPX,
    ppx_args = CURRENCY_PPX_ARGS,
    ppx_data = CONFIG_MLH,
    struct = "intf.ml",
    deps = CURRENCY_DEPS + [
        # do not sort (buildifier)
        ":_Signed_poly",
    ],
)

#############
ocaml_module(
    name = "_Signed_poly",
    opts = CURRENCY_MODULE_OPTS,
    ppx = CURRENCY_PPX,
    ppx_args = CURRENCY_PPX_ARGS,
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,
    struct = "signed_poly.ml",
    deps = CURRENCY_DEPS,
)
