load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_signature",
    "ocaml_module",
    "ocaml_ns_library",
    "ppx_executable",
)

CONFIG_MLH = ["//src:config"]

################################################################
## STANZA 1: LIBRARY LEDGER_PROOF
################################################################
LEDGER_PROOF_SIGNATURE_OPTS = []

LEDGER_PROOF_MODULE_OPTS = []

LEDGER_PROOF_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/mina_base:#mina_base",
    "@mina//src/lib/transaction_snark:#transaction_snark",
]
LEDGER_PROOF_DEPS_OPAM = [
    "core_kernel",
]

#########
ocaml_ns_library(
    name = "#ledger_proof",
    submodules = [
        ":_Ledger_proof",
        ":_Ledger_proof_intf",
    ],
    visibility = [
        "//visibility:public",
    ]
)

#############
ocaml_module(
    name = "_Ledger_proof",
    sig  = ":_Ledger_proof.cmi",
    opts = LEDGER_PROOF_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    struct = "ledger_proof.ml",
    deps = LEDGER_PROOF_DEPS + [
        # do not sort (buildifier)
        ":_Ledger_proof_intf",
    ],
    deps_opam = LEDGER_PROOF_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Ledger_proof.cmi",
    src = "ledger_proof.mli",
    opts = LEDGER_PROOF_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = LEDGER_PROOF_DEPS + [
        # do not sort (buildifier)
        ":_Ledger_proof_intf",
    ],
    deps_opam = LEDGER_PROOF_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Ledger_proof_intf",
    opts = LEDGER_PROOF_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    struct = "ledger_proof_intf.ml",
    deps = LEDGER_PROOF_DEPS,
    deps_opam = LEDGER_PROOF_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_compare.runtime-lib",
        "bin_prot",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/ledger_proof:__pkg__",
    ],
    deps = [
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:#ppx_version",
    ],
    deps_opam = [
        "ppx_bin_prot",
        "ppx_compare",
        "ppx_deriving_yojson",
        "ppx_hash",
        "ppx_sexp_conv",
        "ppxlib",
    ]
)
