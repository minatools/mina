## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_interface",
    "ocaml_module",
    "ocaml_ns",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY SECRETS
################################################################
SECRETS_INTERFACE_OPTS = []

SECRETS_MODULE_OPTS = []

SECRETS_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:core",
    "@opam//pkg:async_unix",
    "@opam//pkg:ppx_deriving_yojson.runtime",
    "@opam//pkg:yojson",
    "@ocaml_sodium//lib:sodium",
    "@mina//src/lib/mina_base",
    "@mina//src/lib/coda_net2",
    "@mina//src/lib/mina_user_error",
]

##############
ocaml_archive(
    name = "secrets",
    doc = "Managing secrets including passwords and keypairs",
    opts = [],
    visibility = ["//visibility:public"],
    deps = SECRETS_DEPS + [
        # do not sort (buildifier)
        ":_Hardware_wallets",
        ":_Keypair",
        ":_Keypair_common",
        ":_Libp2p_keypair",
        ":_Password",
        ":_Privkey_error",
        ":_Secret_box",
        ":_Secret_file",
        ":_Wallets",
    ],
)

#########
ocaml_ns(
    name = "Secrets_ns",
    ns = "secrets",
    opts = [],
    submodules = [
        # do not sort (buildifier)
        "hardware_wallets.ml",
        "keypair.ml",
        "keypair_common.ml",
        "libp2p_keypair.ml",
        "password.ml",
        "privkey_error.ml",
        "secret_box.ml",
        "secret_file.ml",
        "wallets.ml",
    ],
)

#############
ocaml_module(
    name = "_Hardware_wallets",
    src = "hardware_wallets.ml",
    ns = ":Secrets_ns",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS,
)

#############
ocaml_module(
    name = "_Keypair",
    src = "keypair.ml",
    ns = ":Secrets_ns",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS + [
        # do not sort (buildifier)
        ":_Keypair_common",
        ":_Password",
        ":_Privkey_error",
        ":_Secret_file",
    ],
)

#############
ocaml_module(
    name = "_Keypair_common",
    src = "keypair_common.ml",
    ns = ":Secrets_ns",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS + [
        # do not sort (buildifier)
        ":_Password",           # obazl:retain
        ":_Privkey_error",
        ":_Secret_file",
    ],
)

#############
ocaml_module(
    name = "_Libp2p_keypair",
    src = "libp2p_keypair.ml",
    ns = ":Secrets_ns",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS + [
        # do not sort (buildifier)
        ":_Keypair_common",
        ":_Password",
        ":_Privkey_error",
        ":_Secret_file",
    ],
)

#############
ocaml_module(
    name = "_Password",
    src = "password.ml",
    intf = ":_Password.cmi",
    ns = ":Secrets_ns",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS,
)

################
ocaml_interface(
    name = "_Password.cmi",
    src = "password.mli",
    ns = ":Secrets_ns",
    opts = SECRETS_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS,
)

#############
ocaml_module(
    name = "_Privkey_error",
    src = "privkey_error.ml",
    ns = ":Secrets_ns",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS,
)

#############
ocaml_module(
    name = "_Secret_box",
    src = "secret_box.ml",
    intf = ":_Secret_box.cmi",
    ns = ":Secrets_ns",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS,
)

################
ocaml_interface(
    name = "_Secret_box.cmi",
    src = "secret_box.mli",
    ns = ":Secrets_ns",
    opts = SECRETS_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS,
)

#############
ocaml_module(
    name = "_Secret_file",
    src = "secret_file.ml",
    intf = ":_Secret_file.cmi",
    ns = ":Secrets_ns",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS + [
        # do not sort (buildifier)
        ":_Privkey_error",
        ":_Secret_box"          # obazl:retain
    ],
)

################
ocaml_interface(
    name = "_Secret_file.cmi",
    src = "secret_file.mli",
    ns = ":Secrets_ns",
    opts = SECRETS_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS + [
        # do not sort (buildifier)
        ":_Privkey_error",
    ],
)

#############
ocaml_module(
    name = "_Wallets",
    src = "wallets.ml",
    intf = ":_Wallets.cmi",
    ns = ":Secrets_ns",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS + [
        # do not sort (buildifier)
        ":_Hardware_wallets",   # obazl:retain
        ":_Keypair",
    ],
)

################
ocaml_interface(
    name = "_Wallets.cmi",
    src = "wallets.mli",
    ns = ":Secrets_ns",
    opts = SECRETS_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS + [
        # do not sort (buildifier)
        ":_Keypair",
        ":_Secret_file",
    ],
)

###############
ppx_executable(
    name = "ppx1.exe",
    lazy_deps = [
        "@opam//pkg:ppx_expect.collector",
        "@opam//pkg:yojson",
        "@opam//pkg:ppx_hash.runtime-lib",
        "@opam//pkg:ppx_deriving_yojson.runtime",
        "@opam//pkg:ppx_sexp_conv.runtime-lib",
        "@opam//pkg:ppx_deriving.runtime",
        "@opam//pkg:ppx_assert.runtime-lib",
        "@opam//pkg:ppx_compare.runtime-lib",
        "@opam//pkg:ppx_inline_test.runtime-lib",
        "@opam//pkg:ppx_bench.runtime-lib",
        "@opam//pkg:ppx_enumerate.runtime-lib",
        "@opam//pkg:ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:Driver",
    opts = [],
    visibility = [
        "//src/lib/secrets:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda",
        "@opam//pkg:ppx_deriving.make",
        "@opam//pkg:ppx_deriving_yojson",
        "@opam//pkg:ppx_jane",
        "@opam//pkg:ppxlib",
        "@ppx_version//src:ppx_version",
    ],
)
