load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ocaml_signature",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY SECRETS
################################################################
SECRETS_SIGNATURE_OPTS = []

SECRETS_MODULE_OPTS = []

SECRETS_DEPS = [
    # do not sort (buildifier)
    "@ocaml_sodium//lib:sodium",
    "@mina//src/lib/mina_base:#mina_base",
    "@mina//src/lib/mina_net2:#mina_net2",
    "@mina//src/lib/mina_user_error",
]

SECRETS_DEPS_OPAM = [
    "core",
    "async_unix",
    "ppx_deriving_yojson.runtime",
    "yojson",
]

#########
ocaml_ns_library(
    name = "#secrets",
    submodules = [
        ":_Hardware_wallets",
        ":_Keypair",
        ":_Keypair_common",
        ":_Libp2p_keypair",
        ":_Password",
        ":_Privkey_error",
        ":_Secret_box",
        ":_Secret_file",
        ":_Wallets",
    ],
    visibility = [
        "//src/app/rosetta/lib:__pkg__",
        "//src/app/test_executive:__pkg__",
        "//src/lib/cli_lib:__pkg__",
        "//src/lib/mina_lib:__pkg__",
        "//src/lib/user_command_input:__pkg__"
    ]
)

#############
ocaml_module(
    name = "_Hardware_wallets",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    struct = "hardware_wallets.ml",
    deps = SECRETS_DEPS,
    deps_opam = SECRETS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Keypair",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    struct = "keypair.ml",
    deps = SECRETS_DEPS + [
        # do not sort (buildifier)
        ":_Keypair_common",
        ":_Password",
        ":_Privkey_error",
        ":_Secret_file",
    ],
    deps_opam = SECRETS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Keypair_common",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    struct = "keypair_common.ml",
    deps = SECRETS_DEPS + [
        # do not sort (buildifier)
        ":_Password",  # obazl:retain
        ":_Privkey_error",
        ":_Secret_file",
    ],
    deps_opam = SECRETS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Libp2p_keypair",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    struct = "libp2p_keypair.ml",
    deps = SECRETS_DEPS + [
        # do not sort (buildifier)
        ":_Keypair_common",
        ":_Password",
        ":_Privkey_error",
        ":_Secret_file",
    ],
    deps_opam = SECRETS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Password",
    sig  = ":_Password.cmi",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    struct = "password.ml",
    deps = SECRETS_DEPS,
    deps_opam = SECRETS_DEPS_OPAM,
)

################
ocaml_signature(
    name = "_Password.cmi",
    src = "password.mli",
    opts = SECRETS_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS,
    deps_opam = SECRETS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Privkey_error",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    struct = "privkey_error.ml",
    deps = SECRETS_DEPS,
    deps_opam = SECRETS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Secret_box",
    struct = "secret_box.ml",
    sig  = ":_Secret_box.cmi",
    opts = SECRETS_MODULE_OPTS + [
        # "/private/var/tmp/_bazel_gar/a96cd3ac87eaeba07bfd00b35d52a61a/execroot/mina/bazel-out/darwin-fastbuild-ST-f78eddb80449/bin/external/ocaml_sodium/lib/_obazl_/sodium.cmxa"
        # "/private/var/tmp/_bazel_gar/a96cd3ac87eaeba07bfd00b35d52a61a/execroot/mina/bazel-out/darwin-fastbuild/bin/external/ocaml_sodium/lib/_obazl_/sodium.cmxa"
        "bazel-out/darwin-fastbuild-ST-f78eddb80449/bin/external/ocaml_sodium/lib/_obazl_/sodium.cmxa",
        "bazel-out/darwin-fastbuild-ST-f78eddb80449/bin/external/ocaml_sodium/lib/_obazl_/sodium.a",
        "-linkall"
    ],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS,
    deps_opam = SECRETS_DEPS_OPAM,
)

################
ocaml_signature(
    name = "_Secret_box.cmi",
    src = "secret_box.mli",
    opts = SECRETS_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS,
    deps_opam = SECRETS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Secret_file",
    sig  = ":_Secret_file.cmi",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    struct = "secret_file.ml",
    deps = SECRETS_DEPS + [
        # do not sort (buildifier)
        ":_Privkey_error",
        ":_Secret_box",  # obazl:retain
    ],
    deps_opam = SECRETS_DEPS_OPAM,
)

################
ocaml_signature(
    name = "_Secret_file.cmi",
    src = "secret_file.mli",
    opts = SECRETS_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS + [
        # do not sort (buildifier)
        ":_Privkey_error",
    ],
    deps_opam = SECRETS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Wallets",
    sig  = ":_Wallets.cmi",
    opts = SECRETS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    struct = "wallets.ml",
    deps = SECRETS_DEPS + [
        # do not sort (buildifier)
        ":_Hardware_wallets",  # obazl:retain
        ":_Keypair",
    ],
    deps_opam = SECRETS_DEPS_OPAM,
)

################
ocaml_signature(
    name = "_Wallets.cmi",
    src = "wallets.mli",
    opts = SECRETS_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "secrets",
    ],
    deps = SECRETS_DEPS + [
        # do not sort (buildifier)
        ":_Keypair",
        ":_Secret_file",
    ],
    deps_opam = SECRETS_DEPS_OPAM,
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/secrets:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda:#ppx_coda",
        "@ppx_version//src:#ppx_version",
    ],
    deps_opam = [
        "ppx_deriving.make",
        "ppx_deriving_yojson",
        "ppx_jane",
        "ppxlib",
    ]
)
