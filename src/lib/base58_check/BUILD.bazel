load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ocaml_signature",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY BASE58_CHECK
################################################################
BASE58_CHECK_MODULE_OPTS = []

BASE58_CHECK_DEPS_OPAM = [
    # do not sort (buildifier)
    "digestif.c",
    "core_kernel",
    "base58",
]

#########
ocaml_ns_library(
    name = "base58_check",
    main = ":_Base58_check",
    submodules = [
        ":_Base58_check",
        ":_Version_bytes"
    ],
    visibility = [
        "//visibility:public",
        # "//src/lib/codable:__pkg__"
    ]
)

#############
ocaml_module(
    name = "_Base58_check",
    struct = "base58_check.ml",
    sig  = ":_Base58_check.cmi",
    opts = BASE58_CHECK_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "base58_check",
    ],
    deps_opam = BASE58_CHECK_DEPS_OPAM,
    deps = [
        # do not sort (buildifier)
        ":_Version_bytes",
    ],
)

################
ocaml_signature(
    name = "_Base58_check.cmi",
    src = "base58_check.mli",
    # opts = ["-open", "Base58_check__0Resolver"],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "base58_check",
    ],
    deps_opam = BASE58_CHECK_DEPS_OPAM,
    deps = [
        # do not sort (buildifier)
        ":_Version_bytes",
    ],
)

#############
ocaml_module(
    name = "_Version_bytes",
    opts = BASE58_CHECK_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "base58_check",
    ],
    struct = "version_bytes.ml",
    deps_opam = BASE58_CHECK_DEPS_OPAM,
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "yojson",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/base58_check:__pkg__",
    ],
    deps_opam = [
        "ppx_assert",
        "ppx_base",
        "ppx_deriving.std",
        "ppx_deriving_yojson",
        "ppx_inline_test",
        "ppx_let",
        "ppx_sexp_conv",
        "ppxlib"
    ],
    deps = ["@ppx_version//src:ppx_version"]
)
