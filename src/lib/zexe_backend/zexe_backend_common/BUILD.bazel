load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY ZEXE_BACKEND_COMMON
################################################################
ZEXE_BACKEND_COMMON_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/hex:hex",
    "@mina//src/lib/pickles_types:pickles_types",
    "@mina//src/lib/marlin_plonk_bindings:marlin_plonk_bindings",
    "@mina//src/lib/key_cache:key_cache",
    "@mina//src/lib/sgn_type:sgn_type",
    "@snarky//src/intf:snarky_intf",
    "@snarky//src/base:snarky_backendless",
    "@snarky//sponge:sponge",
    "@snarky//snarkette:snarkette",
    "@mina//src/lib/allocation_functor:allocation_functor",
]

ZEXE_BACKEND_COMMON_DEPS_OPAM = [
    "digestif.c",
    "digestif",
    "core",
    "integers",
    ]

#########
ocaml_ns_archive(
    name = "zexe_backend_common",
    submodules = [
        ":_Bigint",
        ":_Curve",
        ":_Dlog_plonk_based_keypair",
        ":_Dlog_urs",
        ":_Endoscale_round",
        ":_Field",
        ":_Intf",
        ":_Plonk_constraint_system",
        ":_Plonk_dlog_oracles",
        ":_Plonk_dlog_proof",
        ":_Poly_comm",
        ":_Scale_round",
        ":_Var",
        ":_Version",

        ## add aliasing equations to resolver:
        # "@snarky//src/intf:snarky_intf",
        # "//src/lib/allocation_functor",
        # "//src/lib/pickles_types",
    ],
    visibility = [
        "//src/lib/zexe_backend:__subpackages__"
    ],
)

#############
ocaml_module(
    name = "_Bigint",
    struct = "bigint.ml",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "zexe_backend_common",
    ],
    deps = ZEXE_BACKEND_COMMON_DEPS,
    deps_opam = ZEXE_BACKEND_COMMON_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Curve",
    opts = [
        "-w", "-22",  # Preprocessor warning.
        "-w", "-33",  # Unused open statement.
    ],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "zexe_backend_common",
    ],
    struct = "curve.ml",
    deps_opam = ZEXE_BACKEND_COMMON_DEPS_OPAM,
    deps = ZEXE_BACKEND_COMMON_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
    ],
)

#############
ocaml_module(
    name = "_Dlog_plonk_based_keypair",
    opts = [
        "-w",
        "-33",  # Unused open statement.
    ],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "zexe_backend_common",
    ],
    struct = "dlog_plonk_based_keypair.ml",
    deps_opam = ZEXE_BACKEND_COMMON_DEPS_OPAM,
    deps = ZEXE_BACKEND_COMMON_DEPS + [
        # do not sort (buildifier)
        ":_Curve",
        ":_Intf",
        ":_Plonk_constraint_system",
        ":_Poly_comm",
    ],
)

#############
ocaml_module(
    name = "_Dlog_urs",
    opts = [
        "-w",
        "-33",  # Error (warning 33): unused open Zexe_backend_common.Intf.
    ],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "zexe_backend_common",
    ],
    struct = "dlog_urs.ml",
    deps_opam = ZEXE_BACKEND_COMMON_DEPS_OPAM,
    deps = ZEXE_BACKEND_COMMON_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
        ":_Version",
    ],
)

#############
ocaml_module(
    name = "_Endoscale_round",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "zexe_backend_common",
    ],
    struct = "endoscale_round.ml",
    deps = ZEXE_BACKEND_COMMON_DEPS,
    deps_opam = ZEXE_BACKEND_COMMON_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Field",
    struct = "field.ml",
    opts = [
        "-w", "-22",  # Preprocessor warning.
        "-w", "-6",  # Error (warning 6): label over was omitted in the application of this function.
        "-w", "-32",  # Error (warning 32): unused value domain_generator.
        "-w", "-33",  # Error (warning 33): unused open Zexe_backend_common.Intf.
    ],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "zexe_backend_common",
    ],
    deps_opam = ZEXE_BACKEND_COMMON_DEPS_OPAM,
    deps = [
        # do not sort (buildifier)
        ":_Bigint",
        ":_Intf",
    ] + ZEXE_BACKEND_COMMON_DEPS
)

#############
ocaml_module(
    name = "_Intf",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "zexe_backend_common",
    ],
    struct = "intf.ml",
    deps = ZEXE_BACKEND_COMMON_DEPS,
    deps_opam = ZEXE_BACKEND_COMMON_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Plonk_constraint_system",
    opts = [
        "-w", "-33", # unused open
        "-w", "-27"  # unused variable
    ],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "zexe_backend_common",
    ],
    struct = "plonk_constraint_system.ml",
    deps_opam = ZEXE_BACKEND_COMMON_DEPS_OPAM,
    deps = ZEXE_BACKEND_COMMON_DEPS + [
        # do not sort (buildifier)
        ":_Endoscale_round",
        ":_Field",
        ":_Scale_round",
    ],
)

#############
ocaml_module(
    name = "_Plonk_dlog_oracles",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "zexe_backend_common",
    ],
    struct = "plonk_dlog_oracles.ml",
    deps_opam = ZEXE_BACKEND_COMMON_DEPS_OPAM,
    deps = ZEXE_BACKEND_COMMON_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
    ],
)

#############
ocaml_module(
    name = "_Plonk_dlog_proof",
    opts = [
        "-w", "-22",  # Error (warning 22): Cannot include Stable.Latest
        "-w", "-33",  # Unused open statement.
        "-w", "-34",  # Unused type declaration.
    ],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "zexe_backend_common",
    ],
    ppx_print = "@ppx//print:text",
    struct = "plonk_dlog_proof.ml",
    deps_opam = ZEXE_BACKEND_COMMON_DEPS_OPAM,
    deps = ZEXE_BACKEND_COMMON_DEPS + [
        # do not sort (buildifier)
        # "//src/lib/allocation_functor",
        ":_Curve",
        ":_Intf",
        ":_Poly_comm",
    ],
)

#############
ocaml_module(
    name = "_Poly_comm",
    opts = [
        "-w",
        "-33",  # Unused open stmts Zexe_backend_common.Intf, Pickles_types.Dlog_plonk_types.Poly_comm.
    ],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "zexe_backend_common",
    ],
    struct = "poly_comm.ml",
    deps_opam = ZEXE_BACKEND_COMMON_DEPS_OPAM,
    deps = ZEXE_BACKEND_COMMON_DEPS + [
        # do not sort (buildifier)
        ":_Curve",
        ":_Intf",
    ],
)

#############
ocaml_module(
    name = "_Scale_round",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "zexe_backend_common",
    ],
    struct = "scale_round.ml",
    deps = ZEXE_BACKEND_COMMON_DEPS,
    deps_opam = ZEXE_BACKEND_COMMON_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Var",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "zexe_backend_common",
    ],
    struct = "var.ml",
    deps = ZEXE_BACKEND_COMMON_DEPS,
    deps_opam = ZEXE_BACKEND_COMMON_DEPS_OPAM,
)

################
ocaml_signature(
    name = "_Version.cmi",
    src = "version.mli",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "zexe_backend_common",
    ],
    deps = ZEXE_BACKEND_COMMON_DEPS,
    deps_opam = ZEXE_BACKEND_COMMON_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Version",  # obazl:retain
    sig  = ":_Version.cmi",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "zexe_backend_common",
    ],
    struct = ":version.ml",  # obazl:retain
)

######## WARNING ########
## This is temporary, until stamping is implemented.
genrule(
    name = "gensrc",
    outs = ["version.ml"],
    cmd = "\n".join([
        "echo 'let marlin_repo_sha = \"00000000\"' > $@",
    ]),
    visibility = ["//visibility:public"],
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    # deps_adjunct = [
    #     "@ppx_version//src/runtime:ppx_version_runtime"
    # ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [
        "-w",
        "-27",
    ],
    visibility = [
        "//src/lib/zexe_backend/zexe_backend_common:__pkg__",
    ],
    deps = [
        "@ppx_version//src:ppx_version",
        "@mina//src/lib/ppx_coda:ppx_coda",
        "@snarky//h_list/ppx:ppx_h_list",
    ],
    deps_opam = [
        "ppx_jane",
        "ppx_deriving_yojson",
        "ppx_deriving.std",
    ]
)
