load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_signature",
    "ocaml_module",
    "ocaml_ns_library",
    "ppx_executable",
)

PPX_PRINT = "@ppx//print:binary"  # FIXME: modules needing this break if ppx_print == text

PICKLES_TYPES_DEPS = [
    "@snarky//src/base:#snarky_backendless",
    "@mina//src/lib/marlin_plonk_bindings:#marlin_plonk_bindings",
]

PICKLES_TYPES_DEPS_OPAM = [
    "core_kernel",
]

#########
ocaml_ns_library(
    name = "#pickles_types",
    submodules = [
        ":_Abc",
        ":_At_most",
        ":_Dlog_marlin_types",
        ":_Dlog_plonk_types",
        ":_Hlist",
        ":_Hlist0",
        ":_Matrix_evals",
        ":_Nat",
        ":_Or_infinity",
        ":_Pairing_marlin_types",
        ":_Pcs_batch",
        ":_Plonk_verification_key_evals",
        ":_Scalar_challenge",
        ":_Shifted_value",
        ":_Vector",
    ],
    visibility = [
        "//src/lib/pickles_base:__pkg__",
        "//src/lib/pickles:__subpackages__",
        "//src/lib/zexe_backend:__subpackages__"
    ],
)

#############
ocaml_module(
    name = "_Abc",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-lint-version-syntax-warnings",
        "-inline-test-lib",
        "pickles_types",
    ],
    ppx_print = PPX_PRINT,
    struct = "abc.ml",
    deps = PICKLES_TYPES_DEPS,
    deps_opam = PICKLES_TYPES_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_At_most",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-lint-version-syntax-warnings",
        "-inline-test-lib",
        "pickles_types",
    ],
    struct = "at_most.ml",
    deps_opam = PICKLES_TYPES_DEPS_OPAM,
    deps = PICKLES_TYPES_DEPS + [
        # do not sort (buildifier)
        ":_Nat",
        ":_Vector",
    ],
)

#############
ocaml_module(
    name = "_Dlog_marlin_types",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-lint-version-syntax-warnings",
        "-inline-test-lib",
        "pickles_types",
    ],
    ppx_print = PPX_PRINT,
    struct = "dlog_marlin_types.ml",
    deps_opam = PICKLES_TYPES_DEPS_OPAM,
    deps = PICKLES_TYPES_DEPS + [
        # do not sort (buildifier)
        ":_Abc",
        ":_Dlog_plonk_types",
        ":_Vector",
    ],
)

#############
ocaml_module(
    name = "_Dlog_plonk_types",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-lint-version-syntax-warnings",
        "-inline-test-lib",
        "pickles_types",
    ],
    ppx_print = PPX_PRINT,
    struct = "dlog_plonk_types.ml",
    deps_opam = PICKLES_TYPES_DEPS_OPAM,
    deps = PICKLES_TYPES_DEPS + [
        # do not sort (buildifier)
        ":_Or_infinity",
        ":_Vector",
    ],
)

#############
ocaml_module(
    name = "_Hlist",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-lint-version-syntax-warnings",
        "-inline-test-lib",
        "pickles_types",
    ],
    ppx_print = PPX_PRINT,
    struct = "hlist.ml",
    deps_opam = PICKLES_TYPES_DEPS_OPAM,
    deps = PICKLES_TYPES_DEPS + [
        # do not sort (buildifier)
        ":_Hlist0",
        ":_Nat",
        ":_Vector",
    ],
)

#############
ocaml_module(
    name = "_Hlist0",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-lint-version-syntax-warnings",
        "-inline-test-lib",
        "pickles_types",
    ],
    struct = "hlist0.ml",
    deps_opam = PICKLES_TYPES_DEPS_OPAM,
    deps = PICKLES_TYPES_DEPS + [
        # do not sort (buildifier)
        ":_Nat",
    ],
)

#############
ocaml_module(
    name = "_Matrix_evals",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-lint-version-syntax-warnings",
        "-inline-test-lib",
        "pickles_types",
    ],
    ppx_print = PPX_PRINT,
    struct = "matrix_evals.ml",
    deps = PICKLES_TYPES_DEPS,
    deps_opam = PICKLES_TYPES_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Nat",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-lint-version-syntax-warnings",
        "-inline-test-lib",
        "pickles_types",
    ],
    struct = "nat.ml",
    deps = PICKLES_TYPES_DEPS,
    deps_opam = PICKLES_TYPES_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Or_infinity",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-lint-version-syntax-warnings",
        "-inline-test-lib",
        "pickles_types",
    ],
    ppx_print = PPX_PRINT,
    struct = "or_infinity.ml",
    deps = PICKLES_TYPES_DEPS,
    deps_opam = PICKLES_TYPES_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Pairing_marlin_types",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-lint-version-syntax-warnings",
        "-inline-test-lib",
        "pickles_types",
    ],
    struct = "pairing_marlin_types.ml",
    deps_opam = PICKLES_TYPES_DEPS_OPAM,
    deps = PICKLES_TYPES_DEPS + [
        # do not sort (buildifier)
        ":_Abc",  # obazl:retain
        ":_Nat",
        ":_Vector",
    ],
)

#############
ocaml_module(
    name = "_Pcs_batch",
    sig  = ":_Pcs_batch.cmi",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-lint-version-syntax-warnings",
        "-inline-test-lib",
        "pickles_types",
    ],
    struct = "pcs_batch.ml",
    deps_opam = PICKLES_TYPES_DEPS_OPAM,
    deps = PICKLES_TYPES_DEPS + [
        # do not sort (buildifier)
        ":_Dlog_plonk_types",
        ":_Nat",
        ":_Vector",
    ],
)

################
ocaml_signature(
    name = "_Pcs_batch.cmi",
    src = "pcs_batch.mli",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-lint-version-syntax-warnings",
        "-inline-test-lib",
        "pickles_types",
    ],
    deps_opam = PICKLES_TYPES_DEPS_OPAM,
    deps = PICKLES_TYPES_DEPS + [
        # do not sort (buildifier)
        ":_Dlog_plonk_types",
        ":_Nat",
        ":_Vector",
    ],
)

#############
ocaml_module(
    name = "_Plonk_verification_key_evals",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-lint-version-syntax-warnings",
        "-inline-test-lib",
        "pickles_types",
    ],
    ppx_print = PPX_PRINT,
    struct = "plonk_verification_key_evals.ml",
    deps = PICKLES_TYPES_DEPS,
    deps_opam = PICKLES_TYPES_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Scalar_challenge",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-lint-version-syntax-warnings",
        "-inline-test-lib",
        "pickles_types",
    ],
    ppx_print = PPX_PRINT,
    struct = "scalar_challenge.ml",
    deps = PICKLES_TYPES_DEPS,
    deps_opam = PICKLES_TYPES_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Shifted_value",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-lint-version-syntax-warnings",
        "-inline-test-lib",
        "pickles_types",
    ],
    ppx_print = PPX_PRINT,
    struct = "shifted_value.ml",
    deps = PICKLES_TYPES_DEPS,
    deps_opam = PICKLES_TYPES_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Vector",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-lint-version-syntax-warnings",
        "-inline-test-lib",
        "pickles_types",
    ],
    struct = "vector.ml",
    deps_opam = PICKLES_TYPES_DEPS_OPAM,
    deps = PICKLES_TYPES_DEPS + [
        # do not sort (buildifier)
        ":_Hlist0",
        ":_Nat",
    ],
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    visibility = [
        "//src/lib/pickles_types:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda:#ppx_coda",
        "@ppx_version//src:#ppx_version",
        "@snarky//h_list/ppx:ppx_h_list",
    ],
    deps_opam = [
        "ppx_jane",
        "ppxlib",
        "ppx_deriving.std",
        "ppx_deriving_yojson",
    ]
)
