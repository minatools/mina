load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ppx_executable",
)

CONFIG_MLH = ["//src:config"]

################################################################
## STANZA 1: LIBRARY STATE_OR_ERROR
################################################################
STATE_OR_ERROR_MODULE_OPTS = []

STATE_OR_ERROR_DEPS_OPAM = [
    # do not sort (buildifier)
    "core",
    # "ppx_fields_conv",  # obazl:retain
]

#########
ocaml_ns_library(
    name = "#state_or_error",
    submodules = [
        ":_State_or_error",
        ":_State_or_error_intf",
    ],
    visibility = [
        "//src/lib/parallel_scan:__pkg__"
    ]
)

#############
ocaml_module(
    name = "_State_or_error",
    opts = STATE_OR_ERROR_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "state_or_error",
    ],
    ppx_data = CONFIG_MLH,
    struct = "state_or_error.ml",
    deps = [
        # do not sort (buildifier)
        ":_State_or_error_intf",
    ],
    deps_opam = STATE_OR_ERROR_DEPS_OPAM
)

#############
ocaml_module(
    name = "_State_or_error_intf",
    opts = STATE_OR_ERROR_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "state_or_error",
    ],
    ppx_data = CONFIG_MLH,
    struct = "state_or_error_intf.ml",
    deps_opam = STATE_OR_ERROR_DEPS_OPAM,
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/state_or_error:__pkg__",
    ],
    deps = [
        "@ppx_version//src:#ppx_version",
    ],
    deps_opam = [
        "ppx_deriving.eq",
        "ppx_deriving.make",
        "ppx_deriving_yojson",
        "ppx_jane",
        "ppxlib",
    ]
)
