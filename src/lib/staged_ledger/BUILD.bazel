load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_signature",
    "ocaml_module",
    "ocaml_ns_library",
    "ppx_executable",
)

CONFIG_MLH = ["//src:config"]

################################################################
## STANZA 1: LIBRARY STAGED_LEDGER
################################################################
STAGED_LEDGER_SIGNATURE_OPTS = []

STAGED_LEDGER_MODULE_OPTS = []

STAGED_LEDGER_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/transaction_snark_scan_state:#transaction_snark_scan_state",
    "@mina//src/lib/sgn:#sgn",
    "@mina//src/lib/transaction_snark:#transaction_snark",
    "@mina//src/lib/mina_base:#mina_base",
    "@mina//src/lib/merkle_mask:#merkle_mask",
    "@mina//src/lib/pipe_lib:#pipe_lib",
    "@mina//src/lib/logger:#logger",
    "@mina//src/lib/ledger_proof:#ledger_proof",
    "@mina//src/lib/verifier:#verifier",
    "@mina//src/lib/transaction_snark_work:#transaction_snark_work",
    "@mina//src/lib/staged_ledger_diff:#staged_ledger_diff",
    "@mina//src/lib/inline_test_quiet_logs",
]
STAGED_LEDGER_DEPS_OPAM = [
    "core",
    "lens",
    "async",
    "async_extra",
]

#########
ocaml_ns_library(
    name = "#staged_ledger",
    submodules = [
        ":_Diff_creation_log",
        ":_Pre_diff_info",
        ":_Staged_ledger",
    ],
    visibility = [
        "//visibility:public",
    ]
)

#############
ocaml_module(
    name = "_Diff_creation_log",
    opts = STAGED_LEDGER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "staged_ledger",
    ],
    ppx_data = CONFIG_MLH,
    struct = "diff_creation_log.ml",
    deps = STAGED_LEDGER_DEPS,
    deps_opam = STAGED_LEDGER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Pre_diff_info",
    opts = STAGED_LEDGER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "staged_ledger",
    ],
    ppx_data = CONFIG_MLH,
    struct = "pre_diff_info.ml",
    deps = STAGED_LEDGER_DEPS,
    deps_opam = STAGED_LEDGER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Staged_ledger",
    sig  = ":_Staged_ledger.cmi",
    opts = STAGED_LEDGER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "staged_ledger",
    ],
    ppx_data = CONFIG_MLH,
    struct = "staged_ledger.ml",
    deps = STAGED_LEDGER_DEPS + [
        # do not sort (buildifier)
        ":_Diff_creation_log",
        ":_Pre_diff_info",
    ],
    deps_opam = STAGED_LEDGER_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Staged_ledger.cmi",
    src = "staged_ledger.mli",
    opts = STAGED_LEDGER_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "staged_ledger",
    ],
    ppx_data = CONFIG_MLH,
    deps = STAGED_LEDGER_DEPS + [
        # do not sort (buildifier)
        ":_Pre_diff_info",
    ],
    deps_opam = STAGED_LEDGER_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "yojson",
        "lens",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "bin_prot",
        "fieldslib",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/staged_ledger:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda:#ppx_coda",
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:#ppx_version",
    ],
    deps_opam = [
        "lens.ppx_deriving",
        "ppx_assert",
        "ppx_bin_prot",
        "ppx_custom_printf",
        "ppx_deriving.eq",
        "ppx_deriving.make",
        "ppx_deriving_yojson",
        "ppx_fields_conv",
        "ppx_inline_test",
        "ppx_let",
        "ppx_pipebang",
        "ppx_sexp_conv",
        "ppxlib",
    ]
)
