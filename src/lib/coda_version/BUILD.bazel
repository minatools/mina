load("@obazl_rules_ocaml//ocaml:rules.bzl",
     "ocaml_module",
     "ocaml_signature")

load("@obazl_tools_bazel//tools:rules.bzl", "stamped_filegroup")

## Only stamp if --stamp flag is pased.  Otherwise use generic defaults.

#############
ocaml_module(
    name = "coda_version",
    struct = "default/coda_version.ml",
    # struct = select({
    #     "//:stampit": "coda_version.ml",
    #     "//conditions:default": "default/coda_version.ml",
    # }),
    sig = ":_Coda_version.cmi",
    opts = [
        "-w", "-32",  # Error (warning 32): unused value marlin_branch.
    ],
    ppx = "//bzl/ppx/exe:ppx_version",
    visibility = ["//visibility:public"],
)

################
ocaml_signature(
    name = "_Coda_version.cmi",
    src = "coda_version.mli",
    ppx = "//bzl/ppx/exe:ppx_version",
)

########
## we're not using any ocaml tools, so native genrule suffices:
## NB: this only runs if --stamp flag is passed
# genrule(
#     name = "gensrc",
#     srcs = ["coda_version.ml.template"],
#     outs = ["coda_version.ml"],
#     cmd = "\n".join([
#         "exec <bazel-out/stable-status.txt",
#         "while read -r K V LINE",  # -r "backslash does not act as an escape char"
#         "do",
#         "    echo $$K",
#         "    eval $$K=$$V",
#         "done",
#         "exec 3>$@",
#         "exec <$<",
#         "while read -r LINE",
#         "do",
#         "    LINE=\"$${LINE//\\{MINA_COMMIT_ID\\}/$$STABLE_MINA_COMMIT_ID}\"",
#         "    LINE=\"$${LINE//\\{MINA_COMMIT_ID_SHORT\\}/$$STABLE_MINA_COMMIT_ID_SHORT}\"",
#         "    LINE=\"$${LINE//\\{MINA_BRANCH\\}/$$STABLE_MINA_BRANCH}\"",
#         "    LINE=\"$${LINE//\\{MINA_COMMIT_DATE\\}/$$STABLE_MINA_COMMIT_DATE}\"",
#         "    echo",
#         "    LINE=\"$${LINE//\\{MARLIN_COMMIT_ID\\}/$$STABLE_MARLIN_COMMIT_ID}\"",
#         "    LINE=\"$${LINE//\\{MARLIN_COMMIT_ID_SHORT\\}/$$STABLE_MARLIN_COMMIT_ID_SHORT}\"",
#         "    LINE=\"$${LINE//\\{MARLIN_COMMIT_DATE\\}/$$STABLE_MARLIN_COMMIT_DATE}\"",
#         "    echo",
#         "    LINE=\"$${LINE//\\{ZEXE_COMMIT_ID\\}/$$STABLE_ZEXE_COMMIT_ID}\"",
#         "    LINE=\"$${LINE//\\{ZEXE_COMMIT_ID_SHORT\\}/$$STABLE_ZEXE_COMMIT_ID_SHORT}\"",
#         "    LINE=\"$${LINE//\\{ZEXE_COMMIT_DATE\\}/$$STABLE_ZEXE_COMMIT_DATE}\"",
#         "    echo $$LINE 1>&3",
#         "done",
#     ]),
#     stamp = True,
#     visibility = ["//visibility:public"],
# )
