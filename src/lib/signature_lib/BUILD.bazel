load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ocaml_signature",
    "ppx_executable",
)

load(
    "//:BUILD.bzl",
    "CONFIG_MLH",
)

################################################################
## STANZA 1: LIBRARY SIGNATURE_LIB
################################################################
SIGNATURE_LIB_INTERFACE_OPTS = []

SIGNATURE_LIB_MODULE_OPTS = []

SIGNATURE_LIB_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/blake2",
    "@mina//src/lib/hash_prefix_states",
    "@mina//src/lib/non_zero_curve_point",
    # "@ppx_version//src/runtime:ppx_version_runtime",
    "@mina//src/lib/random_oracle",
    "@mina//src/lib/snark_params",
    "@snarky//src/base:snarky_backendless",
]

SIGNATURE_LIB_DEPS_OPAM = [
    "core",
    "yojson",
]

#########
ocaml_ns_library(
    name = "signature_lib",
    submodules = [
        ":_Keypair",
        ":_Private_key",
        ":_Public_key",
        ":_Schnorr",
    ],
    visibility = [
        "//visibility:public",
        # "//src/lib/global_signer_private_key:__pkg__",
        # "//src/lib/mina_base/gen:__pkg__",
        # "//src/lib/merkle_ledger:__pkg__",
        # "//src/lib/rosetta_coding:__pkg__"
    ]
)

#############
ocaml_module(
    name = "_Keypair",
    sig  = ":_Keypair.cmi",
    opts = SIGNATURE_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "signature_lib",
    ],
    ppx_data = CONFIG_MLH,
    struct = "keypair.ml",
    deps = SIGNATURE_LIB_DEPS + [
        # do not sort (buildifier)
        ":_Private_key",
        ":_Public_key",
    ],
    deps_opam = SIGNATURE_LIB_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Keypair.cmi",
    src = "keypair.mli",
    opts = SIGNATURE_LIB_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "signature_lib",
    ],
    ppx_data = CONFIG_MLH,
    deps = SIGNATURE_LIB_DEPS + [
        # do not sort (buildifier)
        ":_Private_key",
        ":_Public_key",
    ],
    deps_opam = SIGNATURE_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Private_key",
    opts = SIGNATURE_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "signature_lib",
    ],
    ppx_data = CONFIG_MLH,
    struct = "private_key.ml",
    deps = SIGNATURE_LIB_DEPS,
    deps_opam = SIGNATURE_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Public_key",
    sig  = ":_Public_key.cmi",
    opts = SIGNATURE_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "signature_lib",
    ],
    ppx_data = CONFIG_MLH,
    struct = "public_key.ml",
    deps = SIGNATURE_LIB_DEPS,
    deps_opam = SIGNATURE_LIB_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Public_key.cmi",
    src = "public_key.mli",
    opts = SIGNATURE_LIB_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "signature_lib",
    ],
    ppx_data = CONFIG_MLH,
    deps = SIGNATURE_LIB_DEPS + [
        # do not sort (buildifier)
        ":_Private_key",
    ],
    deps_opam = SIGNATURE_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Schnorr",
    struct = "schnorr.ml",
    opts = SIGNATURE_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "signature_lib",
    ],
    ppx_data = CONFIG_MLH,
    deps = SIGNATURE_LIB_DEPS + [
        ":_Private_key",  # obazl:retain
    ],
    deps_opam = SIGNATURE_LIB_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "bin_prot",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/signature_lib:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda",
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:ppx_version",
        "@snarky//ppx:ppx_snarky",
    ],
    deps_opam = [
        "ppx_bin_prot",
        "ppx_compare",
        "ppx_custom_printf",
        "ppx_deriving.eq",
        "ppx_deriving_yojson",
        "ppx_hash",
        "ppx_inline_test",
        "ppx_let",
        "ppx_sexp_conv",
        "ppxlib",
    ]
)
