load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ocaml_signature",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY INTEGRATION_TEST_CLOUD_ENGINE
################################################################
INTEGRATION_TEST_CLOUD_ENGINE_INTERFACE_OPTS = []

INTEGRATION_TEST_CLOUD_ENGINE_MODULE_OPTS = []

INTEGRATION_TEST_CLOUD_ENGINE_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/mina_base",
    "@mina//src/lib/pipe_lib",
    "@mina//src/lib/runtime_config",
    "@mina//src/lib/genesis_constants",
    "@mina//src/lib/graphql_lib",
    "@mina//src/lib/transition_frontier",
    "@mina//src/lib/user_command_input",
    "@mina//src/lib/genesis_ledger_helper",
    "@mina//src/lib/integration_test_lib",
    "@mina//src/lib/block_time",
    "@mina//src/lib/interruptible",
]
INTEGRATION_TEST_CLOUD_ENGINE_DEPS_OPAM = [
    "core",
    "async",
    "lens",
]

#########
ocaml_ns_library(
    name = "integration_test_cloud_engine",
    main = "_Integration_test_cloud_engine",
    submodules = [
        ":_Cli_inputs",
        ":_Cmd_util",
        ":_Coda_automation",
        ":_Integration_test_cloud_engine",
        ":_Kubernetes_network",
        ":_Stack_driver_log_engine",
        ":_Terraform",
    ],
    visibility = [
        "//visibility:public",
    ]
)

#############
ocaml_module(
    name = "_Cli_inputs",
    opts = INTEGRATION_TEST_CLOUD_ENGINE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "integration_test_cloud_engine",
    ],
    struct = "cli_inputs.ml",
    deps = INTEGRATION_TEST_CLOUD_ENGINE_DEPS,
    deps_opam = INTEGRATION_TEST_CLOUD_ENGINE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Cmd_util",
    opts = INTEGRATION_TEST_CLOUD_ENGINE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "integration_test_cloud_engine",
    ],
    struct = "cmd_util.ml",
    deps = INTEGRATION_TEST_CLOUD_ENGINE_DEPS,
    deps_opam = INTEGRATION_TEST_CLOUD_ENGINE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Coda_automation",
    opts = INTEGRATION_TEST_CLOUD_ENGINE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "integration_test_cloud_engine",
    ],
    struct = "coda_automation.ml",
    deps = INTEGRATION_TEST_CLOUD_ENGINE_DEPS + [
        # do not sort (buildifier)
        ":_Cli_inputs",
        ":_Cmd_util",
        ":_Kubernetes_network",
        ":_Terraform",
    ],
    deps_opam = INTEGRATION_TEST_CLOUD_ENGINE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Integration_test_cloud_engine",
    sig  = ":_Integration_test_cloud_engine.cmi",
    opts = INTEGRATION_TEST_CLOUD_ENGINE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "integration_test_cloud_engine",
    ],
    struct = "integration_test_cloud_engine.ml",
    deps = INTEGRATION_TEST_CLOUD_ENGINE_DEPS + [
        # do not sort (buildifier)
        ":_Cli_inputs",
        ":_Coda_automation",
        ":_Kubernetes_network",
        ":_Stack_driver_log_engine",
    ],
    deps_opam = INTEGRATION_TEST_CLOUD_ENGINE_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Integration_test_cloud_engine.cmi",
    src = "integration_test_cloud_engine.mli",
    opts = INTEGRATION_TEST_CLOUD_ENGINE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "integration_test_cloud_engine",
    ],
    deps = INTEGRATION_TEST_CLOUD_ENGINE_DEPS,
    deps_opam = INTEGRATION_TEST_CLOUD_ENGINE_DEPS_OPAM
)

#############
GRAPHQL_SCHEMA_FILE = "graphql_schema.json"

GRAPHQL_SCHEMA_PATH = GRAPHQL_SCHEMA_FILE

GRAPHQL_SCHEMA_JSON = "//:" + GRAPHQL_SCHEMA_FILE

ocaml_module(
    name = "_Kubernetes_network",
    opts = INTEGRATION_TEST_CLOUD_ENGINE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "integration_test_cloud_engine",
        "-schema",
        GRAPHQL_SCHEMA_PATH,  # obazl:retain
    ],
    ppx_data = [GRAPHQL_SCHEMA_JSON],  # obazl:retain
    struct = "kubernetes_network.ml",
    deps = INTEGRATION_TEST_CLOUD_ENGINE_DEPS + [
        ":_Cmd_util",  # obazl:retain
    ],
    deps_opam = INTEGRATION_TEST_CLOUD_ENGINE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Stack_driver_log_engine",
    opts = INTEGRATION_TEST_CLOUD_ENGINE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "integration_test_cloud_engine",
    ],
    struct = "stack_driver_log_engine.ml",
    deps = INTEGRATION_TEST_CLOUD_ENGINE_DEPS + [
        # do not sort (buildifier)
        ":_Kubernetes_network",
    ],
    deps_opam = INTEGRATION_TEST_CLOUD_ENGINE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Terraform",
    opts = INTEGRATION_TEST_CLOUD_ENGINE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "integration_test_cloud_engine",
    ],
    struct = "terraform.ml",
    deps = INTEGRATION_TEST_CLOUD_ENGINE_DEPS,
    deps_opam = INTEGRATION_TEST_CLOUD_ENGINE_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "yojson",
        "lens",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_inline_test.runtime-lib",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/integration_test_cloud_engine:__pkg__",
    ],
    deps = [
        "@graphql_ppx//src/native:graphql_ppx",
        "@mina//src/lib/ppx_coda",
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "lens.ppx_deriving",
        "ppx_custom_printf",
        "ppx_deriving_yojson",
        "ppx_inline_test",
        "ppx_let",
        "ppxlib",
    ]
)
