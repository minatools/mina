load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY TRUST_SYSTEM
################################################################
TRUST_SYSTEM_INTERFACE_OPTS = []

TRUST_SYSTEM_MODULE_OPTS = []

TRUST_SYSTEM_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/network_peer:network_peer",
    "@mina//src/lib/key_value_database:key_value_database",
    "@mina//src/lib/logger:logger",
    "@mina//src/lib/pipe_lib:pipe_lib",
    "@mina//src/lib/rocksdb:rocksdb",
    "@mina//src/lib/mina_metrics",
]
TRUST_SYSTEM_DEPS_OPAM = [
    "core",
    "async",
]

#################
ocaml_ns_archive(
    name = "trust_system",
    submodules = [
        ":_Banned_status",
        ":_Peer_status",
        ":_Peer_trust",
        ":_Record",
        ":_Trust_system",
    ],
    visibility = [
        "//visibility:public",
        # "//src/lib/syncable_ledger:__pkg__",
    ]
)

#############
ocaml_module(
    name = "_Banned_status",
    struct = "banned_status.ml",
    opts = TRUST_SYSTEM_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "trust_system",
    ],
    deps = TRUST_SYSTEM_DEPS + [
        "@ppx_version//src/runtime:ppx_version_runtime"
    ],
    deps_opam = TRUST_SYSTEM_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Peer_status",
    opts = TRUST_SYSTEM_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "trust_system",
    ],
    struct = "peer_status.ml",
    deps = TRUST_SYSTEM_DEPS + [
        ":_Banned_status",  # obazl:retain
    ],
    deps_opam = TRUST_SYSTEM_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Peer_trust",
    sig  = ":_Peer_trust.cmi",
    opts = TRUST_SYSTEM_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "trust_system",
    ],
    struct = "peer_trust.ml",
    deps = TRUST_SYSTEM_DEPS + [
        # do not sort (buildifier)
        ":_Record",
    ],
    deps_opam = TRUST_SYSTEM_DEPS_OPAM,
)

################
ocaml_signature(
    name = "_Peer_trust.cmi",
    src = "peer_trust.mli",
    opts = TRUST_SYSTEM_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "trust_system",
    ],
    deps = TRUST_SYSTEM_DEPS + [
        # do not sort (buildifier)
        ":_Peer_status",
    ],
    deps_opam = TRUST_SYSTEM_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Record",
    sig  = ":_Record.cmi",
    opts = TRUST_SYSTEM_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "trust_system",
    ],
    struct = "record.ml",
    deps = TRUST_SYSTEM_DEPS + [
        # do not sort (buildifier)
        ":_Banned_status",
        ":_Peer_status",
    ],
    deps_opam = TRUST_SYSTEM_DEPS_OPAM,
)

################
ocaml_signature(
    name = "_Record.cmi",
    src = "record.mli",
    opts = TRUST_SYSTEM_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "trust_system",
    ],
    deps = TRUST_SYSTEM_DEPS + [
        # do not sort (buildifier)
        ":_Peer_status",
    ],
    deps_opam = TRUST_SYSTEM_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Trust_system",
    opts = TRUST_SYSTEM_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "trust_system",
    ],
    struct = "trust_system.ml",
    deps = TRUST_SYSTEM_DEPS + [
        # do not sort (buildifier)
        ":_Banned_status",
        ":_Peer_status",
        ":_Peer_trust",
    ],
    deps_opam = TRUST_SYSTEM_DEPS_OPAM,
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "yojson",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "bin_prot",
        "fieldslib",
    ],
    # deps_adjunct = ["@ppx_version//src/runtime:ppx_version_runtime"],
    main = "//bzl/ppx/exe:ppxlib_driver",
    visibility = [
        "//src/lib/trust_system:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda:ppx_coda",
        # "@mina//src/lib/ppx_register_event:ppx_register_event",
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:ppx_version",
        "@snarky//ppx:ppx_snarky",
    ],
    deps_opam = [
        "ppx_assert",
        "ppx_base",
        "ppx_bin_prot",
        "ppx_custom_printf",
        "ppx_deriving.std",
        "ppx_deriving_yojson",
        "ppx_fields_conv",
        "ppx_inline_test",
        "ppx_let",
        "ppx_sexp_conv",
        "ppxlib",
    ]
)
