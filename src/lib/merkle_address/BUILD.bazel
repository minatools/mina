load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ocaml_signature",
    "ppx_executable",
)

#################
ocaml_ns_library(
    name = "#merkle_address",
    submodules = [
        ":_Merkle_address",
    ],
    visibility = [
        "//visibility:public",
    ],
)

#############
ocaml_module(
    name = "_Merkle_address",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "merkle_address",
    ],
    ppx_print = "@ppx//print:binary",
    sig = ":_Merkle_address.cmi",
    struct = "merkle_address.ml",
    deps = [
        "@mina//src/lib/direction:#direction",
        # "@ppx_version//src/runtime:#ppx_version_runtime",
    ],
    deps_opam = [
        "bitstring",
        "core",
    ],
    visibility = [
        "//src/lib/ledger_catchup:__pkg__",
        "//src/lib/merkle_ledger:__pkg__",
        "//src/lib/merkle_mask:__pkg__",
        "//src/lib/sync_handler:__pkg__",
        "//src/lib/transition_frontier_controller:__pkg__",
    ],
)

################
ocaml_signature(
    name = "_Merkle_address.cmi",
    src = "merkle_address.mli",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "merkle_address",
    ],
    deps = [
        "@mina//src/lib/direction:#direction",
        "@ppx_version//src/runtime:#ppx_version_runtime",
    ],
    deps_opam = [
        "bitstring",
        "core",
    ]
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    deps_adjunct = ["@ppx_version//src/runtime:#ppx_version_runtime"],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/merkle_address:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda:#ppx_coda",
        "@ppx_version//src:#ppx_version",
    ],
    deps_opam = [
        "bitstring.ppx",
        "ppx_deriving.eq",
        "ppx_deriving_yojson",
        "ppx_hash",
        "ppx_jane",
        "ppxlib",
    ]
)
