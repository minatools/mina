load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ocaml_signature",
    "ppx_executable",
)

load(
    "//:BUILD.bzl",
    "CONFIG_MLH",
)

################################################################
## STANZA 1: LIBRARY SNARK_WORKER
################################################################
SNARK_WORKER_INTERFACE_OPTS = []

SNARK_WORKER_MODULE_OPTS = []

SNARK_WORKER_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/cli_lib",
    "@mina//src/lib/currency",
    "@mina//src/lib/snark_work_lib",
    "@mina//src/lib/mina_base",
    "@mina//src/lib/blockchain_snark",
    "@mina//src/lib/transaction_snark",
    "@mina//src/lib/perf_histograms",
    "@mina//src/lib/sparse_ledger_lib",
    "@mina//src/lib/ledger_proof",
    "@mina//src/lib/transaction_witness",
]
SNARK_WORKER_DEPS_OPAM = [
    "core_kernel",
    "async",
    "core_kernel.hash_heap",
]

#########
ocaml_ns_library(
    name = "snark_worker",
    main = "_Snark_worker",
    submodules = [
        ":_Debug",
        ":_Functor",
        ":_Intf",
        ":_Prod",
        ":_Rpcs",
        ":_Snark_worker",
    ],
    visibility = [
        "//visibility:public",
    ]
)

#############
ocaml_module(
    name = "_Debug",
    opts = SNARK_WORKER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snark_worker",
    ],
    ppx_data = CONFIG_MLH,
    struct = "debug.ml",
    deps = SNARK_WORKER_DEPS,
    deps_opam = SNARK_WORKER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Functor",
    opts = SNARK_WORKER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snark_worker",
    ],
    ppx_data = CONFIG_MLH,
    struct = "functor.ml",
    deps = SNARK_WORKER_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
        ":_Rpcs",
    ],
    deps_opam = SNARK_WORKER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Intf",
    opts = SNARK_WORKER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snark_worker",
    ],
    ppx_data = CONFIG_MLH,
    struct = "intf.ml",
    deps = SNARK_WORKER_DEPS,
    deps_opam = SNARK_WORKER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Prod",
    opts = SNARK_WORKER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snark_worker",
    ],
    ppx_data = CONFIG_MLH,
    struct = "prod.ml",
    deps = SNARK_WORKER_DEPS,
    deps_opam = SNARK_WORKER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Rpcs",
    opts = SNARK_WORKER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snark_worker",
    ],
    ppx_data = CONFIG_MLH,
    struct = "rpcs.ml",
    deps = SNARK_WORKER_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
    ],
    deps_opam = SNARK_WORKER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Snark_worker",
    sig  = ":_Snark_worker.cmi",
    opts = SNARK_WORKER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snark_worker",
    ],
    ppx_data = CONFIG_MLH,
    struct = "snark_worker.ml",
    deps = SNARK_WORKER_DEPS + [
        # do not sort (buildifier)
        ":_Debug",
        ":_Functor",
        ":_Intf",
        ":_Prod",
        ":_Rpcs",
    ],
)

################
ocaml_signature(
    name = "_Snark_worker.cmi",
    src = "snark_worker.mli",
    opts = SNARK_WORKER_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snark_worker",
    ],
    ppx_data = CONFIG_MLH,
    deps = SNARK_WORKER_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
    ],
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "yojson",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "bin_prot",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/snark_worker:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda",
        "@mina//src/lib/ppx_register_event",
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_bin_prot",
        "ppx_custom_printf",
        "ppx_deriving_yojson",
        "ppx_inline_test",
        "ppx_let",
        "ppx_sexp_conv",
        "ppxlib",
    ]
)
