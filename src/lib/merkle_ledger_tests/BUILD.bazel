load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_archive",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY MERKLE_LEDGER_TESTS
################################################################
MERKLE_LEDGER_TESTS_MODULE_OPTS = []

MERKLE_LEDGER_TESTS_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/merkle_ledger",
    "@mina//src/lib/merkle_mask:merkle_mask",
    "@mina//src/lib/mina_base:mina_base",
    "@mina//src/lib/signature_lib:signature_lib",
]
MERKLE_LEDGER_TESTS_DEPS_OPAM = [
    "core",
    "extlib",
]

#########
ocaml_ns_archive(
    name = "merkle_ledger_tests",
    submodules = [
        ":_Binary_tree",
        ":_Test",
        ":_Test_database",
        ":_Test_mask",
        ":_Test_stubs",
    ],
    visibility = [
        "//src/lib/syncable_ledger:__pkg__"
    ]
)

#############
ocaml_module(
    name = "_Binary_tree",
    opts = MERKLE_LEDGER_TESTS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "merkle_ledger_tests",
    ],
    struct = "binary_tree.ml",
    deps = MERKLE_LEDGER_TESTS_DEPS,
    deps_opam = MERKLE_LEDGER_TESTS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Test",
    opts = MERKLE_LEDGER_TESTS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "merkle_ledger_tests",
    ],
    struct = "test.ml",
    deps = MERKLE_LEDGER_TESTS_DEPS + [
        # do not sort (buildifier)
        ":_Test_stubs",
    ],
    deps_opam = MERKLE_LEDGER_TESTS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Test_database",
    opts = MERKLE_LEDGER_TESTS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "merkle_ledger_tests",
    ],
    struct = "test_database.ml",
    deps = MERKLE_LEDGER_TESTS_DEPS + [
        # do not sort (buildifier)
        ":_Test_stubs",
    ],
    deps_opam = MERKLE_LEDGER_TESTS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Test_mask",
    opts = MERKLE_LEDGER_TESTS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "merkle_ledger_tests",
    ],
    struct = "test_mask.ml",
    deps = MERKLE_LEDGER_TESTS_DEPS + [
        # do not sort (buildifier)
        ":_Test_stubs",
    ],
    deps_opam = MERKLE_LEDGER_TESTS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Test_stubs",
    opts = MERKLE_LEDGER_TESTS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "merkle_ledger_tests",
    ],
    struct = "test_stubs.ml",
    deps = MERKLE_LEDGER_TESTS_DEPS,
    deps_opam = MERKLE_LEDGER_TESTS_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/merkle_ledger_tests:__pkg__",
    ],
    deps = [
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_deriving.eq",
        "ppx_deriving.show",
        "ppx_deriving_yojson",
        "ppx_jane",
        "ppxlib",
    ]
)
