load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
)

################################################################
## STANZA 1: LIBRARY SNARKY_FIELD_EXTENSIONS
################################################################
SNARKY_FIELD_EXTENSIONS_MODULE_OPTS = []

SNARKY_FIELD_EXTENSIONS_DEPS = [
    # do not sort (buildifier)
    "@snarky//src/base:#snarky_backendless",
    "@snarky//snarkette:#snarkette",
]
SNARKY_FIELD_EXTENSIONS_DEPS_OPAM = [
    "core_kernel",
]

SNARKY_FIELD_EXTENSIONS_PPX = "@//bzl/ppx/exe:ppx_version__ppx_jane__ppx_deriving.eq__ppx_deriving_yojson"

SNARKY_FIELD_EXTENSIONS_PPX_ARGS = [
    # do not sort (buildifier)
    "-inline-test-lib",
    "snarky_field_extensions",
]

#################
ocaml_ns_library(
    name = "#snarky_field_extensions",
    submodules = [
        ":_Field_extensions",
        ":_Intf",
    ],
    visibility = [
        "//src/lib/snarky_curves:__pkg__",
        "//src/lib/snarky_pairing:__pkg__",
    ]
)

#############
ocaml_module(
    name = "_Field_extensions",
    struct = "field_extensions.ml",
    opts = SNARKY_FIELD_EXTENSIONS_MODULE_OPTS,
    ppx = SNARKY_FIELD_EXTENSIONS_PPX,
    ppx_args = SNARKY_FIELD_EXTENSIONS_PPX_ARGS,
    deps = SNARKY_FIELD_EXTENSIONS_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
    ],
    deps_opam = SNARKY_FIELD_EXTENSIONS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Intf",
    struct = "intf.ml",
    opts = SNARKY_FIELD_EXTENSIONS_MODULE_OPTS,
    ppx = SNARKY_FIELD_EXTENSIONS_PPX,
    ppx_args = SNARKY_FIELD_EXTENSIONS_PPX_ARGS,
    deps = SNARKY_FIELD_EXTENSIONS_DEPS,
    deps_opam = SNARKY_FIELD_EXTENSIONS_DEPS_OPAM
)
