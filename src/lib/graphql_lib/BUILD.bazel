load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_signature",
    "ocaml_module",
    "ocaml_ns_archive",
)

################################################################
## STANZA 1: LIBRARY GRAPHQL_LIB
################################################################
GRAPHQL_LIB_INTERFACE_OPTS = []

GRAPHQL_LIB_MODULE_OPTS = []

GRAPHQL_LIB_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/mina_base:mina_base",
]
GRAPHQL_LIB_DEPS_OPAM = [
    "async",
    "cohttp",
    "core",
    "cohttp-async",
    "graphql-async",
    "graphql-cohttp",
]

GRAPHQL_LIB_PPX = "@//bzl/ppx/exe:ppx_jane__ppx_version__ppx_deriving.eq__ppx_deriving_yojson"

GRAPHQL_LIB_PPX_ARGS = [
    # do not sort (buildifier)
    "-inline-test-lib",
    "graphql_lib",
]

#########
ocaml_ns_archive(
    name = "graphql_lib",
    submodules = [
        ":_Base_types",
        ":_Client",
        ":_Decoders",
        ":_Encoders",
    ],
    visibility = [
        "//visibility:public",
    ]
)

#############
ocaml_module(
    name = "_Base_types",
    sig  = ":_Base_types.cmi",
    opts = GRAPHQL_LIB_MODULE_OPTS,
    ppx = GRAPHQL_LIB_PPX,
    ppx_args = GRAPHQL_LIB_PPX_ARGS,
    struct = "base_types.ml",
    deps = GRAPHQL_LIB_DEPS,
    deps_opam = GRAPHQL_LIB_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Base_types.cmi",
    src = "base_types.mli",
    opts = GRAPHQL_LIB_INTERFACE_OPTS,
    ppx = GRAPHQL_LIB_PPX,
    ppx_args = GRAPHQL_LIB_PPX_ARGS,
    deps = GRAPHQL_LIB_DEPS,
    deps_opam = GRAPHQL_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Client",
    opts = GRAPHQL_LIB_MODULE_OPTS,
    ppx = GRAPHQL_LIB_PPX,
    ppx_args = GRAPHQL_LIB_PPX_ARGS,
    struct = "client.ml",
    deps = GRAPHQL_LIB_DEPS,
    deps_opam = GRAPHQL_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Decoders",
    opts = GRAPHQL_LIB_MODULE_OPTS,
    ppx = GRAPHQL_LIB_PPX,
    ppx_args = GRAPHQL_LIB_PPX_ARGS,
    struct = "decoders.ml",
    deps = GRAPHQL_LIB_DEPS,
    deps_opam = GRAPHQL_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Encoders",
    opts = GRAPHQL_LIB_MODULE_OPTS,
    ppx = GRAPHQL_LIB_PPX,
    ppx_args = GRAPHQL_LIB_PPX_ARGS,
    struct = "encoders.ml",
    deps = GRAPHQL_LIB_DEPS,
    deps_opam = GRAPHQL_LIB_DEPS_OPAM
)
