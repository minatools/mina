load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_archive",
    "ppx_executable",
)

CONFIG_MLH = ["//src:config"]

################################################################
## STANZA 1: LIBRARY MINA_METRICS
################################################################
MINA_METRICS_MODULE_OPTS = []

MINA_METRICS_DEPS = [
    # do not sort (buildifier)
    # "@ocaml_jemalloc//src:jemalloc",
    "@mina//src/lib/logger:logger",
]

MINA_METRICS_DEPS_OPAM = [
    "async",
    "async_ssl",  # obazl:retain
    "cohttp",
    "cohttp-async",
    "prometheus",
]

#########
ocaml_ns_archive(
    name = "mina_metrics",
    submodules = [
        ":_Mina_metrics",
        ":_Metric_generators",
        ":_Namespace",
    ],
    visibility = ["//visibility:public"],
)

#############
ocaml_module(
    name = "_Mina_metrics",
    opts = MINA_METRICS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_data = CONFIG_MLH,
    ppx_print = "@ppx//print:text",
    struct = "mina_metrics.ml",
    deps = MINA_METRICS_DEPS + [
        # do not sort (buildifier)
        "@ocaml_jemalloc//src:jemalloc",
        ":_Namespace",
        ":_Metric_generators",
    ],
    deps_opam = MINA_METRICS_DEPS_OPAM + [
        # "angstrom",
        # "re2",
        # "ppx_deriving_yojson",
        # "yojson",
    ]
)

#############
ocaml_module(
    name = "_Metric_generators",
    opts = MINA_METRICS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_data = CONFIG_MLH,
    struct = "metric_generators.ml",
    deps = MINA_METRICS_DEPS + [
        # do not sort (buildifier)
        ":_Namespace",
    ],
    deps_opam = MINA_METRICS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Namespace",
    opts = MINA_METRICS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_data = CONFIG_MLH,
    struct = "namespace.ml",
    deps = MINA_METRICS_DEPS,
    deps_opam = MINA_METRICS_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_sexp_conv.runtime-lib",
        ## FIXME: this should be inherited from the ppx_code dep?
        "yojson"
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/mina_metrics:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda:ppx_coda",
        "@ppx_version//src:ppx_version",
        "@ppx_optcomp//src:ppx_optcomp",
    ],
    deps_opam = [
        ## from logproc_lib:
        # "angstrom",
        # "ppx_deriving_yojson",
        # "re2",
        # "yojson",
        "ppx_let",
        "ppx_custom_printf",
        "ppx_pipebang",
    ]
)
