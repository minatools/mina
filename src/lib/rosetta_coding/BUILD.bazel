load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ppx_executable",
)

CONFIG_MLH = ["//src:config"]

################################################################
## STANZA 1: LIBRARY ROSETTA_CODING
################################################################
ROSETTA_CODING_MODULE_OPTS = []

ROSETTA_CODING_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/snark_params:#snark_params",
    "@mina//src/lib/signature_lib:#signature_lib",
]
ROSETTA_CODING_DEPS_OPAM = [
    "core_kernel",
]

#################
ocaml_ns_library(
    name = "#rosetta_coding",
    submodules = [
         ":_Coding",
    ],
    visibility = [
        "//visibility:public",
    ]
)

#############
ocaml_module(
    name = "_Coding",
    opts = ROSETTA_CODING_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "rosetta_coding",
    ],
    ppx_data = CONFIG_MLH,
    struct = "coding.ml",
    deps = ROSETTA_CODING_DEPS,
    deps_opam = ROSETTA_CODING_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_assert.runtime-lib",
        "ppx_inline_test.runtime-lib",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/rosetta_coding:__pkg__",
    ],
    deps = [
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:#ppx_version",
    ],
    deps_opam = [
        "ppx_assert",
        "ppx_inline_test",
        "ppx_let",
        "ppxlib",
    ]
)
