load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY MERKLE_MASK
################################################################
MERKLE_MASK_MODULE_OPTS = []

MERKLE_MASK_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/debug_assert",
    "@mina//src/lib/immutable_array",
    "@mina//src/lib/merkle_ledger",
    "@mina//src/lib/merkle_address",
    "@mina//src/lib/visualization",
]
MERKLE_MASK_DEPS_OPAM = [
    "core",
    "bitstring",
    "integers",
    "yojson",
]

#########
ocaml_ns_library(
    name = "merkle_mask",
    submodules = [
        ":_Base_merkle_tree_intf",
        ":_Inputs_intf",
        ":_Maskable_merkle_tree",
        ":_Maskable_merkle_tree_intf",
        ":_Masking_merkle_tree",
        ":_Masking_merkle_tree_intf",
    ],
    visibility = [
        "//visibility:public",
    ]
)

#############
ocaml_module(
    name = "_Base_merkle_tree_intf",
    opts = MERKLE_MASK_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "merkle_mask",
    ],
    struct = "base_merkle_tree_intf.ml",
    deps = MERKLE_MASK_DEPS,
    deps_opam = MERKLE_MASK_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Inputs_intf",
    opts = MERKLE_MASK_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "merkle_mask",
    ],
    struct = "inputs_intf.ml",
    deps = [
        # do not sort (buildifier)
        ":_Base_merkle_tree_intf",
    ],
    deps_opam = MERKLE_MASK_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Maskable_merkle_tree",
    opts = MERKLE_MASK_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "merkle_mask",
    ],
    struct = "maskable_merkle_tree.ml",
    deps = [
        # do not sort (buildifier)
        ":_Inputs_intf",
        ":_Masking_merkle_tree_intf",
    ],
    deps_opam = MERKLE_MASK_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Maskable_merkle_tree_intf",
    opts = MERKLE_MASK_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "merkle_mask",
    ],
    struct = "maskable_merkle_tree_intf.ml",
    deps = [
        # do not sort (buildifier)
        ":_Base_merkle_tree_intf",
    ],
    deps_opam = MERKLE_MASK_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Masking_merkle_tree",
    opts = MERKLE_MASK_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "merkle_mask",
    ],
    struct = "masking_merkle_tree.ml",
    deps = [
        # do not sort (buildifier)
        ":_Inputs_intf",
    ],
    deps_opam = MERKLE_MASK_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Masking_merkle_tree_intf",
    opts = MERKLE_MASK_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "merkle_mask",
    ],
    struct = "masking_merkle_tree_intf.ml",
    deps = [
        # do not sort (buildifier)
        ":_Base_merkle_tree_intf",
    ],
    deps_opam = MERKLE_MASK_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//visibility:public",
        # "//src/lib/merkle_mask:__pkg__",
    ],
    deps = [
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_deriving.eq",
        "ppx_deriving.show",
        "ppx_deriving_yojson",
        "ppx_jane",
        "ppxlib",
    ]
)
