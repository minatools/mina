load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_archive",
)

################################################################
## STANZA 1: LIBRARY LIMB_VECTOR
################################################################
LIMB_VECTOR_MODULE_OPTS = []

LIMB_VECTOR_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/pickles/backend",
    "@mina//src/lib/pickles_types",
    "@snarky//src/base:snarky_backendless",
]

LIMB_VECTOR_DEPS_OPAM = [
    "core_kernel",
]

LIMB_VECTOR_PPX = "@//bzl/ppx/exe:ppx_version__ppx_coda__ppx_jane__ppx_deriving.std__ppx_deriving_yojson"

LIMB_VECTOR_PPX_ARGS = [
    # do not sort (buildifier)
    "-inline-test-lib",
    "limb_vector",
]

#########
ocaml_ns_archive(
    name = "limb_vector",
    submodules = [
        ":_Constant",
        ":_Make",
        ":_Challenge",
        ":_Limb_vector",
    ],
    visibility = [
        "//src/lib/pickles:__pkg__",
        "//src/lib/pickles/composition_types:__pkg__"
    ]
)

#############
ocaml_module(
    name = "_Challenge",
    opts = LIMB_VECTOR_MODULE_OPTS,
    ppx = LIMB_VECTOR_PPX,
    ppx_args = LIMB_VECTOR_PPX_ARGS,
    struct = "challenge.ml",
    deps = LIMB_VECTOR_DEPS + [
        # do not sort (buildifier)
        ":_Constant",
        ":_Make",
    ],
    deps_opam = LIMB_VECTOR_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Constant",
    opts = LIMB_VECTOR_MODULE_OPTS + [
        "-w",
        "-22",  # Deriving bin_io and deriving version disallowed for types in functor body
    ],
    ppx = LIMB_VECTOR_PPX,
    ppx_args = LIMB_VECTOR_PPX_ARGS,
    struct = "constant.ml",
    deps = LIMB_VECTOR_DEPS,
    deps_opam = LIMB_VECTOR_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Limb_vector",
    opts = LIMB_VECTOR_MODULE_OPTS,
    ppx = LIMB_VECTOR_PPX,
    ppx_args = LIMB_VECTOR_PPX_ARGS,
    struct = "limb_vector.ml",
    deps = LIMB_VECTOR_DEPS + [
        # do not sort (buildifier)
        ":_Challenge",
        ":_Constant",
    ],
    deps_opam = LIMB_VECTOR_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Make",
    opts = LIMB_VECTOR_MODULE_OPTS,
    ppx = LIMB_VECTOR_PPX,
    ppx_args = LIMB_VECTOR_PPX_ARGS,
    struct = "make.ml",
    deps = LIMB_VECTOR_DEPS + [
        # do not sort (buildifier)
        ":_Constant",
    ],
    deps_opam = LIMB_VECTOR_DEPS_OPAM
)
