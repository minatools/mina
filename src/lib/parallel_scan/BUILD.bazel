load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ocaml_signature",
    "ppx_executable",
)

PPX_PRINT = "@ppx//print:binary"

#################
ocaml_ns_library(
    name = "#parallel_scan",
    submodules = [
        ":_Parallel_scan",
    ],
    visibility = [
        "//visibility:public",
    ],
)

#############
ocaml_module(
    name = "_Parallel_scan",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "parallel_scan",
    ],
    ppx_print = PPX_PRINT,  # obazl:retain
    sig = ":_Parallel_scan.cmi",
    struct = "parallel_scan.ml",
    visibility = ["//visibility:public"],
    deps = [
        "@mina//src/lib/mina_metrics:#mina_metrics",
        "@mina//src/lib/non_empty_list:#non_empty_list",
        "@mina//src/lib/pipe_lib:#pipe_lib",
        "@mina//src/lib/sgn:#sgn",
        "@mina//src/lib/state_or_error:#state_or_error",
    ],
    deps_opam = [
        "async",
        "async_extra",
        "core",
        "digestif.c",
        "lens",
    ]
)

################
ocaml_signature(
    name = "_Parallel_scan.cmi",
    src = "parallel_scan.mli",
    opts = [],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "parallel_scan",
    ],
    deps = [
        "@mina//src/lib/mina_metrics:#mina_metrics",
        "@mina//src/lib/non_empty_list:#non_empty_list",
        "@mina//src/lib/pipe_lib:#pipe_lib",
        "@mina//src/lib/sgn:#sgn",
        "@mina//src/lib/state_or_error:#state_or_error",
    ],
    deps_opam = [
        "async",
        "async_extra",
        "core",
        "digestif.c",
        "lens",
    ]
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "lens",
        "ppx_hash.runtime-lib",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/parallel_scan:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda:#ppx_coda",
        "@ppx_version//src:#ppx_version",
    ],
    deps_opam = [
        "lens.ppx_deriving",
        "ppx_deriving.eq",
        "ppx_jane",
        "ppxlib",
    ]
)
