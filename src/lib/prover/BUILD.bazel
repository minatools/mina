load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_signature",
    "ocaml_module",
    "ocaml_ns_library",
)

load(
    "//:BUILD.bzl",
    "CONFIG_MLH",
)

################################################################
## STANZA 1: LIBRARY PROVER
################################################################
PROVER_INTERFACE_OPTS = []

PROVER_MODULE_OPTS = []

PROVER_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/mina_base",
    "@mina//src/lib/coda_state",
    "@mina//src/lib/coda_transition",
    "@mina//src/lib/blockchain_snark",
    "@mina//src/lib/memory_stats",
    "@mina//src/lib/precomputed_values",
    "@mina//src/lib/child_processes",
]
PROVER_DEPS_OPAM = [
    "async",
    "core",
    "rpc_parallel",
]

PROVER_PPX = "@//bzl/ppx/exe:ppx_coda__ppx_version__ppx_jane"

PROVER_PPX_ARGS = [
    # do not sort (buildifier)
    "-inline-test-lib",
    "prover",
]

#########
ocaml_ns_library(
    name = "prover",
    main = "_Prover",
    submodules = [
        ":_Intf",
        ":_Prover",
    ],
    visibility = [
        "//visibility:public",
    ]
)

#############
ocaml_module(
    name = "_Intf",
    struct = "intf.ml",
    opts = PROVER_MODULE_OPTS,
    ppx = PROVER_PPX,
    ppx_args = PROVER_PPX_ARGS,
    ppx_data = CONFIG_MLH,
    deps = PROVER_DEPS,
    deps_opam = PROVER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Prover",
    struct = "prover.ml",
    sig  = ":_Prover.cmi",
    opts = PROVER_MODULE_OPTS,
    ppx = PROVER_PPX,
    ppx_args = PROVER_PPX_ARGS,
    ppx_data = CONFIG_MLH,
    deps = PROVER_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
    ],
    deps_opam = PROVER_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Prover.cmi",
    src = "prover.mli",
    opts = PROVER_INTERFACE_OPTS,
    ppx = PROVER_PPX,
    ppx_args = PROVER_PPX_ARGS,
    ppx_data = CONFIG_MLH,
    deps = PROVER_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
    ],
    deps_opam = PROVER_DEPS_OPAM
)
