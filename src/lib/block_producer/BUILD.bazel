load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ppx_executable",
)

#################
ocaml_ns_library(
    name = "block_producer",
    main = ":_Block_producer",
    submodules = [
        ":_Block_producer",
    ],
    visibility = [
        "//visibility:public",
    ],
)

#############
ocaml_module(
    name = "_Block_producer",
    opts = [],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "block_producer",
    ],
    struct = "block_producer.ml",
    visibility = ["//visibility:public"],
    deps = [
        "@mina//src/lib/coda_intf",
        "@mina//src/lib/coda_state",
        "@mina//src/lib/coda_transition",
        "@mina//src/lib/consensus",
        "@mina//src/lib/interruptible",
        "@mina//src/lib/mina_base",
        "@mina//src/lib/network_pool",
        "@mina//src/lib/o1trace",
        "@mina//src/lib/otp_lib",
        "@mina//src/lib/pipe_lib",
        "@mina//src/lib/prover",
        "@mina//src/lib/transaction_snark_scan_state",
        "@mina//src/lib/transition_chain_prover",
        "@mina//src/lib/transition_frontier",
        "@mina//src/lib/unix_timestamp",
    ],
    deps_opam = [
        "async",
        "async_extra",
        "core",
    ]
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "ppx_hash.runtime-lib",
        "ppx_sexp_conv.runtime-lib",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/block_producer:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda",
        "@mina//src/lib/ppx_register_event",
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_jane",
        "ppxlib",
    ]
)
