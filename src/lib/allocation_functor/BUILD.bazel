load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_signature",
    "ocaml_module",
    "ocaml_ns_archive",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY ALLOCATION_FUNCTOR
################################################################
ALLOCATION_FUNCTOR_SIGNATURE_OPTS = []

ALLOCATION_FUNCTOR_MODULE_OPTS = []

ALLOCATION_FUNCTOR_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/mina_metrics",
]
ALLOCATION_FUNCTOR_DEPS_OPAM = [
    "core_kernel"
]

#########
ocaml_ns_archive(
    name = "allocation_functor",
    submodules = [
        ":_Intf",
        ":_Make",
        ":_Table"
    ],
    visibility = [
        "//visibility:public",
        # "//src/lib/zexe_backend/zexe_backend_common:__pkg__",
    ],

)

#############
ocaml_module(
    name = "_Intf",
    opts = ALLOCATION_FUNCTOR_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "allocation_functor",
    ],
    ppx_print = "@ppx//print:text",
    struct = "intf.ml",
    deps = ALLOCATION_FUNCTOR_DEPS,
    deps_opam = ALLOCATION_FUNCTOR_DEPS_OPAM,
    # cc_deps = {
    #     "@ocaml_jemalloc//src:libjemalloc"   : "dynamic" # obazl dynamic does not seem to work
    # },
)

#############
ocaml_module(
    name = "_Make",
    opts = ALLOCATION_FUNCTOR_MODULE_OPTS + [
        "-w", "-22",  # Error (warning 22): Versioned type used outside a versioned type declaration
    ],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "allocation_functor",
    ],
    struct = "make.ml",
    deps = ALLOCATION_FUNCTOR_DEPS + [
        # do not sort (buildifier)
        ":_Intf",
        ":_Table",
    ],
    deps_opam = ALLOCATION_FUNCTOR_DEPS_OPAM,
    # cc_deps = {
    #     "@ocaml_jemalloc//src:libjemalloc"   : "default"
    # },
)

#############
ocaml_module(
    name = "_Table",
    sig  = ":_Table.cmi",
    opts = ALLOCATION_FUNCTOR_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "allocation_functor",
    ],
    struct = "table.ml",
    deps = ALLOCATION_FUNCTOR_DEPS,
    deps_opam = ALLOCATION_FUNCTOR_DEPS_OPAM + ["prometheus"],
)

################
ocaml_signature(
    name = "_Table.cmi",
    src = "table.mli",
    opts = ALLOCATION_FUNCTOR_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "allocation_functor",
    ],
    deps = ALLOCATION_FUNCTOR_DEPS,
    deps_opam = ALLOCATION_FUNCTOR_DEPS_OPAM + ["prometheus"],
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    # deps_adjunct = [
    #     "@ppx_version//src/runtime:ppx_version_runtime",
    # ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/allocation_functor:__pkg__",
    ],
    deps = [
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_jane",
        # "ppxlib",
        "ppx_compare",
        "ppx_deriving_yojson",
    ]
)
