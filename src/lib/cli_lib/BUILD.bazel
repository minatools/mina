load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY CLI_LIB
################################################################
CLI_LIB_SIGNATURE_OPTS = []

CLI_LIB_MODULE_OPTS = []

CLI_LIB_DEPS = [
    # do not sort (buildifier)
    "@ocaml_sodium//lib:sodium",
    # "@mina//src/lib/mina_base",
    # "@mina//src/lib/secrets",
    # "@mina//src/lib/work_selector",
    # "@mina//src/lib/graphql_lib",
    # "@mina//src/lib/rosetta_coding",
]

CLI_LIB_DEPS_OPAM = [
    "core",
    "async_unix",
    "ppx_deriving_yojson.runtime",
    "yojson",
]
#########
ocaml_ns_archive(
    name = "cli_lib",
    submodules = [
        ":_Arg_type",
        ":_Background_daemon",
        ":_Commands",
        ":_Default",
        ":_Exceptions",
        ":_Flag",
        ":_Graphql_types",
        ":_Render",
        ":_Stdout_log",
    ],
    visibility = [
        "//src/app/archive:__pkg__",
        "//src/app/best_tip_merger:__pkg__",
        "//src/app/cli/src/init:__pkg__",
        "//src/app/cli_lib:__pkg__",
        "//src/app/generate_keypair:__pkg__",
        "//src/lib/daemon_rpcs:__pkg__",
        "//src/lib/snark_worker:__pkg__"
    ]
)

#############
ocaml_module(
    name = "_Arg_type",
    opts = CLI_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "cli_lib",
    ],
    struct = "arg_type.ml",
    deps = CLI_LIB_DEPS + [
        "@mina//src/lib/work_selector:work_selector",
    ],
    deps_opam = CLI_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Background_daemon",
    sig  = ":_Background_daemon.cmi",
    opts = CLI_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "cli_lib",
    ],
    struct = "background_daemon.ml",
    deps = CLI_LIB_DEPS + [
        # do not sort (buildifier)
        ":_Flag",
    ],
    deps_opam = CLI_LIB_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Background_daemon.cmi",
    src = "background_daemon.mli",
    opts = CLI_LIB_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "cli_lib",
    ],
    deps = CLI_LIB_DEPS + [
        # do not sort (buildifier)
        ":_Flag",
    ],
    deps_opam = CLI_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Commands",
    struct = "commands.ml",
    opts = CLI_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "cli_lib",
    ],
    deps = CLI_LIB_DEPS + [
        "@mina//src/lib/rosetta_coding:rosetta_coding",
        "@mina//src/lib/secrets:secrets",
        "@mina//src/lib/rosetta_lib:rosetta_lib",
        ":_Exceptions",  # obazl:retain
        ":_Flag",  # obazl:retain
    ],
    deps_opam = CLI_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Default",
    opts = CLI_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "cli_lib",
    ],
    struct = "default.ml",
    deps = CLI_LIB_DEPS,
    deps_opam = CLI_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Exceptions",
    opts = CLI_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "cli_lib",
    ],
    struct = "exceptions.ml",
    deps = CLI_LIB_DEPS,
    deps_opam = CLI_LIB_DEPS_OPAM + [
        "async",
    ],
)

#############
ocaml_module(
    name = "_Flag",
    sig  = ":_Flag.cmi",
    opts = CLI_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "cli_lib",
    ],
    struct = "flag.ml",
    deps = CLI_LIB_DEPS + [
        # do not sort (buildifier)
        ":_Arg_type",
    ],
    deps_opam = CLI_LIB_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Flag.cmi",
    src = "flag.mli",
    opts = CLI_LIB_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "cli_lib",
    ],
    deps = CLI_LIB_DEPS + [
        "@mina//src/lib/graphql_lib:graphql_lib",
    ],
    deps_opam = CLI_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Graphql_types",
    opts = CLI_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "cli_lib",
    ],
    struct = "graphql_types.ml",
    deps = CLI_LIB_DEPS + [
        "//src/lib/currency:currency",
        "//src/lib/mina_base:mina_base",
        "//src/lib/signature_lib:signature_lib",
    ],
    deps_opam = CLI_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Render",
    opts = CLI_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "cli_lib",
    ],
    struct = "render.ml",
    deps = CLI_LIB_DEPS + [
        "@mina//src/lib/mina_base:mina_base",
    ],
    deps_opam = CLI_LIB_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Stdout_log",
    opts = CLI_LIB_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "cli_lib",
    ],
    struct = "stdout_log.ml",
    deps = CLI_LIB_DEPS + [
        "//src/lib/logger:logger",
    ],
    deps_opam = CLI_LIB_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/cli_lib:__pkg__",
    ],
    deps = [
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_deriving.make",
        "ppx_deriving_yojson",
        "ppx_jane",
        "ppxlib",
    ]
)
