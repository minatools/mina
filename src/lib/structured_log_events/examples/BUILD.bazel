load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY STRUCTURED_LOG_EVENTS_EXAMPLES
################################################################
STRUCTURED_LOG_EVENTS_EXAMPLES_MODULE_OPTS = []

STRUCTURED_LOG_EVENTS_EXAMPLES_DEPS = [
    # do not sort (buildifier)
    "//src/lib/structured_log_events",  # obazl:retain
]
STRUCTURED_LOG_EVENTS_EXAMPLES_DEPS_OPAM = [
    "core_kernel",
    "yojson",
]

#########
ocaml_ns_library(
    name = "structured_log_events_examples",
    submodules = [
        ":_Event_declarations",
    ],
)

#############
ocaml_module(
    name = "_Event_declarations",
    opts = STRUCTURED_LOG_EVENTS_EXAMPLES_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "structured_log_events_examples",
    ],
    struct = "event_declarations.ml",
    deps = STRUCTURED_LOG_EVENTS_EXAMPLES_DEPS,
    deps_opam = STRUCTURED_LOG_EVENTS_EXAMPLES_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    visibility = [
        "//src/lib/structured_log_events/examples:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda",
        "@mina//src/lib/ppx_register_event",
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_deriving.std",
        "ppx_deriving_yojson",
        "ppx_inline_test",
        "ppx_jane",
        "ppxlib",
    ]
)
