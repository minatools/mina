## WARNING: use ocaml_ns_library, not ocaml_ns_archive

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_signature",
    "ocaml_module",
    "ocaml_ns_library",
)

################################################################
## STANZA 1: LIBRARY LOGPROC_LIB
################################################################
LOGPROC_LIB_DEPS_OPAM = [
    "core_kernel",
    "yojson",
    "angstrom",
    "re2",
]

PPX = "@//bzl/ppx/exe:ppx_version__ppx_jane__ppx_deriving.std"

PPX_ARGS = [
    # do not sort (buildifier)
    "-inline-test-lib",
    "logproc_lib",
]

#########
ocaml_ns_library(
    name = "logproc_lib",
    main = ":_Logproc_lib",
    submodules = [
        ":_Filter",
        ":_Logproc_lib",
    ],
    sublibs = [
        ":interpolator_lib"
    ],
    visibility = ["//visibility:public"]
)

#############
ocaml_module(
    name = "_Logproc_lib",
    struct = "logproc_lib.ml",
    deps      = [
        ":_Filter",
        ":interpolator_lib"
    ],
    deps_opam = LOGPROC_LIB_DEPS_OPAM,
    ppx = PPX,
    ppx_args = PPX_ARGS,
)

#############
ocaml_module(
    name = "_Filter",
    struct = "filter.ml",
    sig  = ":_Filter.cmi",
    deps_opam = LOGPROC_LIB_DEPS_OPAM,
    ppx = PPX,
    ppx_args = PPX_ARGS,
)

################
ocaml_signature(
    name = "_Filter.cmi",
    src = "filter.mli",
    ppx = PPX,
    ppx_args = PPX_ARGS,
    # deps = LOGPROC_LIB_DEPS,
    deps_opam = LOGPROC_LIB_DEPS_OPAM
)

#############
# ocaml_module(
#     name = "_Logproc_lib",
#     # ppx = PPX,
#     # ppx_args = PPX_ARGS,
#     struct = "logproc_lib.ml",
#     deps = [
#         ":_Filter",
#         ":interpolator_lib"
#     ]

#     # deps = [":_Filter"]
# )

################################################################
## STANZA 2: LIBRARY INTERPOLATOR_LIB
################################################################

# Dune builds this as a separate library:
# ;; interpolator is made separately available because
# ;; filter depends on re2, which binds to C++ code,
# ;; making it unusable from js_of_ocaml
# With Bazel we don't really need to do that, but the code is set up to expect it.

#################
ocaml_ns_library(
    name = "interpolator_lib",
    submodules = [
        ":_Interpolator",
    ],
    visibility = [
        "//src/lib/structured_log_events:__pkg__"
    ]
)

#############
ocaml_module(
    name = "_Interpolator",
    struct = "interpolator.ml",
    deps_opam = [
        "core_kernel",
        "yojson",
        "angstrom",
    ],
    ppx = PPX,
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib", "interpolator_lib",
    ]
)
