load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ocaml_signature",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY BOOTSTRAP_CONTROLLER
################################################################
BOOTSTRAP_CONTROLLER_SIGNATURE_OPTS = []

BOOTSTRAP_CONTROLLER_MODULE_OPTS = []

BOOTSTRAP_CONTROLLER_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/mina_base",
    "@mina//src/lib/coda_transition",
    "@mina//src/lib/syncable_ledger",
    "@mina//src/lib/pipe_lib",
    "@mina//src/lib/consensus",
    "@mina//src/lib/transition_frontier",
    "@mina//src/lib/mina_networking",
    "@mina//src/lib/sync_handler",
    "@mina//src/lib/fake_network",
]

BOOTSTRAP_CONTROLLER_DEPS_OPAM = [
    "core"
]

#########
ocaml_ns_library(
    name = "bootstrap_controller",
    main = ":_Bootstrap_controller",
    submodules = [
        ":_Bootstrap_controller",
        ":_Transition_cache"
    ],
    visibility = [
        "//src/lib/transition_router:__pkg__"
    ]
)

#############
ocaml_module(
    name = "_Bootstrap_controller",
    opts = BOOTSTRAP_CONTROLLER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "bootstrap_controller",
    ],
    sig = ":_Bootstrap_controller.cmi",
    struct = "bootstrap_controller.ml",
    deps = BOOTSTRAP_CONTROLLER_DEPS + [
        # do not sort (buildifier)
        ":_Transition_cache",
    ],
    deps_opam = BOOTSTRAP_CONTROLLER_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Bootstrap_controller.cmi",
    src = "bootstrap_controller.mli",
    opts = BOOTSTRAP_CONTROLLER_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "bootstrap_controller",
    ],
    deps = BOOTSTRAP_CONTROLLER_DEPS,
    deps_opam = BOOTSTRAP_CONTROLLER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Transition_cache",
    opts = BOOTSTRAP_CONTROLLER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "bootstrap_controller",
    ],
    sig = ":_Transition_cache.cmi",
    struct = "transition_cache.ml",
    deps = BOOTSTRAP_CONTROLLER_DEPS,
    deps_opam = BOOTSTRAP_CONTROLLER_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Transition_cache.cmi",
    src = "transition_cache.mli",
    opts = BOOTSTRAP_CONTROLLER_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "bootstrap_controller",
    ],
    deps = BOOTSTRAP_CONTROLLER_DEPS,
    deps_opam = BOOTSTRAP_CONTROLLER_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "ppx_hash.runtime-lib",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/bootstrap_controller:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda",
        "@mina//src/lib/ppx_register_event",
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_deriving.eq",
        "ppx_jane",
        "ppxlib",
    ]
)
