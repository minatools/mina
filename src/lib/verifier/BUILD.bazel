load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_signature",
    "ocaml_module",
    "ocaml_ns_archive",
    "ppx_executable",
)

CONFIG_MLH = ["//src:config"]

################################################################
## STANZA 1: LIBRARY VERIFIER
################################################################
VERIFIER_SIGNATURE_OPTS = []

VERIFIER_MODULE_OPTS = []

VERIFIER_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/precomputed_values:precomputed_values",
    "@mina//src/lib/mina_base:mina_base",
    "@mina//src/lib/mina_state:mina_state",
    "@mina//src/lib/blockchain_snark:blockchain_snark",
    "@mina//src/lib/memory_stats:memory_stats",
    "@mina//src/lib/snark_params:snark_params",
    "@mina//src/lib/ledger_proof:ledger_proof",
    "@mina//src/lib/logger:logger",
    "@mina//src/lib/child_processes:child_processes",
]
VERIFIER_DEPS_OPAM = [
    "core_kernel",
    "async_kernel",
    "rpc_parallel",
]

#########
ocaml_ns_archive(
    name = "verifier",
    submodules = [
        ":_Common",
        ":_Dummy",
        ":_Prod",
        ":_Verification_failure",
        ":_Verifier",
        ":_Verifier_intf",
    ],
    visibility = [
        "//visibility:public",
    ]
)

#############
ocaml_module(
    name = "_Common",
    opts = VERIFIER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    struct = "common.ml",
    deps = VERIFIER_DEPS,
    deps_opam = VERIFIER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Dummy",
    sig  = ":_Dummy.cmi",
    opts = VERIFIER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    struct = "dummy.ml",
    deps = VERIFIER_DEPS + [
        # do not sort (buildifier)
        ":_Common",
    ],
    deps_opam = VERIFIER_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Dummy.cmi",
    src = "dummy.mli",
    opts = VERIFIER_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = VERIFIER_DEPS + [
        # do not sort (buildifier)
        ":_Verifier_intf",
    ],
    deps_opam = VERIFIER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Prod",
    sig  = ":_Prod.cmi",
    opts = VERIFIER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    struct = "prod.ml",
    deps = VERIFIER_DEPS + [
        # do not sort (buildifier)
        ":_Common",
    ],
    deps_opam = VERIFIER_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Prod.cmi",
    src = "prod.mli",
    opts = VERIFIER_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = VERIFIER_DEPS + [
        # do not sort (buildifier)
        ":_Verifier_intf",
    ],
    deps_opam = VERIFIER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Verification_failure",
    opts = VERIFIER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    struct = "verification_failure.ml",
    deps = VERIFIER_DEPS,
    deps_opam = VERIFIER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Verifier",
    sig  = ":_Verifier.cmi",
    opts = VERIFIER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    struct = "verifier.ml",
    deps = VERIFIER_DEPS + [
        # do not sort (buildifier)
        ":_Dummy",
        ":_Prod",
        ":_Verification_failure",
    ],
    deps_opam = VERIFIER_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Verifier.cmi",
    src = "verifier.mli",
    opts = VERIFIER_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = VERIFIER_DEPS + [
        # do not sort (buildifier)
        ":_Dummy",
        ":_Prod",
        ":_Verification_failure",
    ],
    deps_opam = VERIFIER_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Verifier_intf",
    opts = VERIFIER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    struct = "verifier_intf.ml",
    deps = VERIFIER_DEPS,
    deps_opam = VERIFIER_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_compare.runtime-lib",
        "bin_prot",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/verifier:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda:ppx_coda",
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:ppx_version",
    ],
    deps_opam = [
        "ppx_bin_prot",
        "ppx_compare",
        "ppx_deriving.std",
        "ppx_deriving_yojson",
        "ppx_hash",
        "ppx_let",
        "ppx_sexp_conv",
        "ppxlib",
    ]
)
