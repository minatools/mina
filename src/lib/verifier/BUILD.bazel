## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_interface",
    "ocaml_module",
    "ocaml_ns",
    "ppx_executable",
)
load(
    "//:BUILD.bzl",
    "CONFIG_MLH",
)

################################################################
## STANZA 1: LIBRARY VERIFIER
################################################################
VERIFIER_INTERFACE_OPTS = []

VERIFIER_MODULE_OPTS = []

VERIFIER_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:core_kernel",
    "@opam//pkg:async_kernel",
    "@opam//pkg:rpc_parallel",
    "@mina//src/lib/precomputed_values",
    "@mina//src/lib/mina_base",
    "@mina//src/lib/coda_state",
    "@mina//src/lib/blockchain_snark",
    "@mina//src/lib/memory_stats",
    "@mina//src/lib/snark_params",
    "@mina//src/lib/ledger_proof",
    "@mina//src/lib/logger",
    "@mina//src/lib/child_processes",
]

##############
ocaml_archive(
    name = "verifier",
    opts = [],
    visibility = ["//visibility:public"],
    deps = VERIFIER_DEPS + [
        # do not sort (buildifier)
        ":_Common",
        ":_Dummy",
        ":_Prod",
        ":_Verification_failure",
        ":_Verifier",
        ":_Verifier_intf",
    ],
)

#########
ocaml_ns(
    name = "Verifier_ns",
    ns = "verifier",
    opts = [],
    submodules = [
        # do not sort (buildifier)
        "common.ml",
        "dummy.ml",
        "prod.ml",
        "verification_failure.ml",
        "verifier.ml",
        "verifier_intf.ml",
    ],
)

#############
ocaml_module(
    name = "_Common",
    src = "common.ml",
    ns = ":Verifier_ns",
    opts = VERIFIER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = VERIFIER_DEPS,
)

#############
ocaml_module(
    name = "_Dummy",
    src = "dummy.ml",
    intf = ":_Dummy.cmi",
    ns = ":Verifier_ns",
    opts = VERIFIER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = VERIFIER_DEPS + [
        # do not sort (buildifier)
        ":_Common",
    ],
)

################
ocaml_interface(
    name = "_Dummy.cmi",
    src = "dummy.mli",
    ns = ":Verifier_ns",
    opts = VERIFIER_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = VERIFIER_DEPS + [
        # do not sort (buildifier)
        ":_Verifier_intf",
    ],
)

#############
ocaml_module(
    name = "_Prod",
    src = "prod.ml",
    intf = ":_Prod.cmi",
    ns = ":Verifier_ns",
    opts = VERIFIER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = VERIFIER_DEPS + [
        # do not sort (buildifier)
        ":_Common",
    ],
)

################
ocaml_interface(
    name = "_Prod.cmi",
    src = "prod.mli",
    ns = ":Verifier_ns",
    opts = VERIFIER_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = VERIFIER_DEPS + [
        # do not sort (buildifier)
        ":_Verifier_intf",
    ],
)

#############
ocaml_module(
    name = "_Verification_failure",
    src = "verification_failure.ml",
    ns = ":Verifier_ns",
    opts = VERIFIER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = VERIFIER_DEPS,
)

#############
ocaml_module(
    name = "_Verifier",
    src = "verifier.ml",
    intf = ":_Verifier.cmi",
    ns = ":Verifier_ns",
    opts = VERIFIER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = VERIFIER_DEPS + [
        # do not sort (buildifier)
        ":_Dummy",
        ":_Prod",
        ":_Verification_failure",
    ],
)

################
ocaml_interface(
    name = "_Verifier.cmi",
    src = "verifier.mli",
    ns = ":Verifier_ns",
    opts = VERIFIER_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = VERIFIER_DEPS + [
        # do not sort (buildifier)
        ":_Dummy",
        ":_Prod",
        ":_Verification_failure",
    ],
)

#############
ocaml_module(
    name = "_Verifier_intf",
    src = "verifier_intf.ml",
    ns = ":Verifier_ns",
    opts = VERIFIER_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = VERIFIER_DEPS,
)

###############
ppx_executable(
    name = "ppx1.exe",
    lazy_deps = [
        "@opam//pkg:yojson",
        "@opam//pkg:ppx_hash.runtime-lib",
        "@opam//pkg:ppx_deriving_yojson.runtime",
        "@opam//pkg:ppx_sexp_conv.runtime-lib",
        "@opam//pkg:ppx_deriving.runtime",
        "@opam//pkg:ppx_compare.runtime-lib",
        "@opam//pkg:bin_prot",
    ],
    main = "//bzl/ppx/exe:Driver",
    opts = [],
    visibility = [
        "//src/lib/verifier:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda",
        "@opam//pkg:ppx_bin_prot",
        "@opam//pkg:ppx_compare",
        "@opam//pkg:ppx_deriving.std",
        "@opam//pkg:ppx_deriving_yojson",
        "@opam//pkg:ppx_hash",
        "@opam//pkg:ppx_let",
        "@opam//pkg:ppx_sexp_conv",
        "@opam//pkg:ppxlib",
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:ppx_version",
    ],
)
