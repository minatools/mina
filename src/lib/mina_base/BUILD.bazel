load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_genrule",
    "ocaml_module",
    "ocaml_ns_library",
    "ocaml_signature",
    "ppx_executable",
)

load(
    "//:BUILD.bzl",
    "CONFIG_MLH",
)

PPX_PRINT = "@ppx//print:binary"

################################################################
## STANZA 1: LIBRARY MINA_BASE
################################################################
MINA_BASE_INTERFACE_OPTS = []

MINA_BASE_MODULE_OPTS = []

MINA_BASE_DEPS = [
    # do not sort (buildifier)
    "@mina//src/lib/allocation_functor",
    "@mina//src/lib/base58_check",
    "@mina//src/lib/bignum_bigint",
    "@mina//src/lib/block_time",
    "@mina//src/lib/coda_compile_config",
    "@mina//src/lib/genesis_constants",
    "@mina//src/lib/coda_numbers",
    "@mina//src/lib/codable",
    "@mina//src/lib/crypto_params",
    "@mina//src/lib/currency",
    "@mina//src/lib/debug_assert",
    "@mina//src/lib/dummy_values",
    "@snarky//fold_lib",
    "@mina//src/lib/hash_prefix_states",
    "@mina//src/lib/hash_prefixes",
    "@mina//src/lib/linked_tree",
    "@mina//src/lib/merkle_ledger",
    "@mina//src/lib/merkle_mask",
    "@mina//src/lib/one_or_two",
    "@mina//src/lib/o1trace",
    "@mina//src/lib/outside_hash_image",
    "@ppx_version//src/runtime:ppx_version_runtime",
    "@mina//src/lib/quickcheck_lib",
    "@mina//src/lib/random_oracle",
    "@mina//src/lib/rocksdb",
    "@mina//src/lib/rosetta_coding",
    "@mina//src/lib/signature_lib",
    "@mina//src/lib/snark_bits",
    "@mina//src/lib/snark_params",
    "@snarky//src/base:snarky_backendless",
    "@mina//src/lib/sparse_ledger_lib",
    "@mina//src/lib/storage",
    "@mina//src/lib/syncable_ledger",
    "@mina//src/lib/test_util",
    "@mina//src/lib/trust_system",
    "@mina//src/lib/unsigned_extended",
    "@mina//src/lib/visualization",
    "@mina//src/lib/with_hash",
]

MINA_BASE_DEPS_OPAM = [
    "async",
    "async_extra",
    "digestif.c",
    "core",
    "sexp_diff_kernel",
    "yojson",
]

#########
ocaml_ns_library(
    name = "mina_base",
    submodules = [
        ":_Account",
        ":_Account_id",
        ":_Account_timing",
        ":_Coinbase",
        ":_Coinbase_fee_transfer",
        ":_Control",
        ":_Data_hash",
        ":_Epoch_data",
        ":_Epoch_ledger",
        ":_Epoch_seed",
        ":_Fee_excess",
        ":_Fee_transfer",
        ":_Fee_with_prover",
        ":_Frozen_ledger_hash",
        ":_Frozen_ledger_hash0",
        ":_Hack_snarky_tests",
        ":_Hash_prefix",
        ":_How_to_obtain_keys",
        ":_Import",
        ":_Insecure",
        ":_Ledger",
        ":_Ledger_hash",
        ":_Ledger_hash0",
        ":_Ledger_hash_intf",
        ":_Ledger_hash_intf0",
        ":_Ledger_transfer",
        ":_Minting_payload",
        ":_New_account_payload",
        ":_New_token_payload",
        ":_Other_fee_payer",
        ":_Payment_payload",
        ":_Pending_coinbase",
        ":_Pending_coinbase_intf",
        ":_Pending_coinbase_witness",
        ":_Permissions",
        ":_Proof",
        ":_Protocol_constants_checked",
        ":_Receipt",
        ":_Rpc_intf",
        ":_Side_loaded_verification_key",
        ":_Signature",
        ":_Signature_poly",
        ":_Signed_command",
        ":_Signed_command_intf",
        ":_Signed_command_memo",
        ":_Signed_command_payload",
        ":_Snapp_account",
        ":_Snapp_basic",
        ":_Snapp_command",
        ":_Snapp_predicate",
        ":_Snapp_state",
        ":_Snapp_statement",
        ":_Sok_message",
        ":_Sparse_ledger",
        ":_Staged_ledger_hash",
        ":_Stake_delegation",
        ":_State_body_hash",
        ":_State_hash",
        ":_Sync_ledger",
        ":_Token_id",
        ":_Token_permissions",
        ":_Transaction",
        ":_Transaction_hash",
        ":_Transaction_logic",
        ":_Transaction_union",
        ":_Transaction_union_payload",
        ":_Transaction_union_tag",
        ":_Transaction_validator",
        ":_User_command",
        ":_User_command_status",
        ":_Util",
        ":_With_status",
        ":_Sample_keypairs",
    ],
    visibility = [
        "//visibility:public",
    ]
)

#############
ocaml_module(
    name = "_Account",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "account.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account_id",
        ":_Account_timing",
        ":_Hash_prefix",
        ":_Import",
        ":_Permissions",
        ":_Receipt",
        ":_Snapp_account",
        ":_State_hash",
        ":_Token_id",
        ":_Token_permissions",
    ],
)

#############
ocaml_module(
    name = "_Account_id",
    sig  = ":_Account_id.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "account_id.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Token_id",
    ],
)

################
ocaml_signature(
    name = "_Account_id.cmi",
    src = "account_id.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Token_id",
    ],
)

#############
ocaml_module(
    name = "_Account_timing",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "account_timing.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Coinbase",
    sig  = ":_Coinbase.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "coinbase.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account_id",
        ":_Coinbase_fee_transfer",
        ":_Fee_excess",
        ":_Import",
        ":_Token_id",
    ],
)

################
ocaml_signature(
    name = "_Coinbase.cmi",
    src = "coinbase.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account_id",
        ":_Coinbase_fee_transfer",
        ":_Fee_excess",
        ":_Import",
    ],
)

#############
ocaml_module(
    name = "_Coinbase_fee_transfer",
    sig  = ":_Coinbase_fee_transfer.cmi",
    opts = MINA_BASE_MODULE_OPTS + [
        "-w",
        "-32",  # Unused value declaration.
    ],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "coinbase_fee_transfer.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account_id",
        ":_Fee_transfer",
        ":_Import",
        ":_Token_id",
    ],
)

################
ocaml_signature(
    name = "_Coinbase_fee_transfer.cmi",
    src = "coinbase_fee_transfer.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account_id",
        ":_Fee_transfer",
        ":_Import",
    ],
)

#############
ocaml_module(
    name = "_Control",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "control.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [":_Signature"],  # obazl:retain
)

#############
ocaml_module(
    name = "_Data_hash",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "data_hash.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Epoch_data",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "epoch_data.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Epoch_ledger",
        ":_Epoch_seed",
        ":_State_hash",
    ],
)

#############
ocaml_module(
    name = "_Epoch_ledger",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "epoch_ledger.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Frozen_ledger_hash0",
    ],
)

#############
ocaml_module(
    name = "_Epoch_seed",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "epoch_seed.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Data_hash",
    ],
)

#############
ocaml_module(
    name = "_Fee_excess",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "fee_excess.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Token_id",
    ],
)

#############
ocaml_module(
    name = "_Fee_transfer",
    sig  = ":_Fee_transfer.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "fee_transfer.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account_id",
        ":_Fee_excess",
        ":_Import",
        ":_Token_id",
    ],
)

################
ocaml_signature(
    name = "_Fee_transfer.cmi",
    src = "fee_transfer.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account_id",
        ":_Fee_excess",
        ":_Import",
        ":_Token_id",
    ],
)

#############
ocaml_module(
    name = "_Fee_with_prover",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "fee_with_prover.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Frozen_ledger_hash",
    sig  = ":_Frozen_ledger_hash.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "frozen_ledger_hash.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Ledger_hash",
    ],
)

################
ocaml_signature(
    name = "_Frozen_ledger_hash.cmi",
    src = "frozen_ledger_hash.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Frozen_ledger_hash0",
        ":_Ledger_hash",
        ":_Ledger_hash_intf",
    ],
)

#############
ocaml_module(
    name = "_Frozen_ledger_hash0",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "frozen_ledger_hash0.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Ledger_hash0",
    ],
)

#############
ocaml_module(
    name = "_Hack_snarky_tests",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "hack_snarky_tests.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Hash_prefix",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "hash_prefix.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_How_to_obtain_keys",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "how_to_obtain_keys.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Import",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "import.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Insecure",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "insecure.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Ledger",
    sig  = ":_Ledger.cmi",
    opts = MINA_BASE_MODULE_OPTS + [
        "-w",
        "-32",  # Unused value declaration.
    ],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "ledger.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account",
        ":_Account_id",
        ":_Account_timing",
        ":_Ledger_hash",
        ":_Token_id",
        ":_Transaction_logic",
    ],
)

################
ocaml_signature(
    name = "_Ledger.cmi",
    src = "ledger.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account",
        ":_Account_id",
        ":_Account_timing",
        ":_Coinbase",
        ":_Fee_transfer",
        ":_Ledger_hash",
        ":_Receipt",
        ":_Signed_command",
        ":_Snapp_command",
        ":_Snapp_predicate",
        ":_Token_id",
        ":_Transaction",
        ":_Transaction_logic",
        ":_User_command_status",
        ":_With_status",
    ],
)

#############
ocaml_module(
    name = "_Ledger_hash",
    sig  = ":_Ledger_hash.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "ledger_hash.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account",
        ":_Account_id",
        ":_Hash_prefix",
        ":_Import",
        ":_Ledger_hash0",
    ],
)

################
ocaml_signature(
    name = "_Ledger_hash.cmi",
    src = "ledger_hash.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Ledger_hash0",
        ":_Ledger_hash_intf",
    ],
)

#############
ocaml_module(
    name = "_Ledger_hash0",
    sig  = ":_Ledger_hash0.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "ledger_hash0.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Data_hash",
    ],
)

################
ocaml_signature(
    name = "_Ledger_hash0.cmi",
    src = "ledger_hash0.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Ledger_hash_intf0",
    ],
)

#############
ocaml_module(
    name = "_Ledger_hash_intf",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "ledger_hash_intf.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account",
        ":_Account_id",
        ":_Ledger_hash_intf0",
    ],
)

#############
ocaml_module(
    name = "_Ledger_hash_intf0",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "ledger_hash_intf0.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Data_hash",
    ],
)

#############
ocaml_module(
    name = "_Ledger_transfer",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "ledger_transfer.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account",
        ":_Account_id",
        ":_Ledger_hash",
        ":_Sparse_ledger",
        ":_Token_id",
    ],
)

#############
ocaml_module(
    name = "_Minting_payload",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "minting_payload.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account_id",
        ":_Import",
    ],
)

#############
ocaml_module(
    name = "_New_account_payload",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "new_account_payload.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account_id",
        ":_Import",
    ],
)

#############
ocaml_module(
    name = "_New_token_payload",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "new_token_payload.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account_id",
        ":_Import",
        ":_Token_id",
    ],
)

#############
ocaml_module(
    name = "_Other_fee_payer",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "other_fee_payer.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Signature",  # obazl:retain
        ":_Token_id",
    ],
)

#############
ocaml_module(
    name = "_Payment_payload",
    sig  = ":_Payment_payload.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "payment_payload.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Token_id",
    ],
)

################
ocaml_signature(
    name = "_Payment_payload.cmi",
    src = "payment_payload.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Token_id",
    ],
)

#############
ocaml_module(
    name = "_Pending_coinbase",
    sig  = ":_Pending_coinbase.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "pending_coinbase.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Coinbase",
        ":_Data_hash",
        ":_Hash_prefix",
        ":_Import",
        ":_State_body_hash",
        ":_Util",
    ],
)

################
ocaml_signature(
    name = "_Pending_coinbase.cmi",
    src = "pending_coinbase.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Pending_coinbase_intf",
    ],
)

#############
ocaml_module(
    name = "_Pending_coinbase_intf",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "pending_coinbase_intf.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Coinbase",
        ":_State_body_hash",
    ],
)

#############
ocaml_module(
    name = "_Pending_coinbase_witness",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "pending_coinbase_witness.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [":_Pending_coinbase"],  ## obazl:retain
)

#############
ocaml_module(
    name = "_Permissions",
    sig  = ":_Permissions.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "permissions.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Control",
        ":_Frozen_ledger_hash0",
        ":_Ledger_hash0",
    ],
)

################
ocaml_signature(
    name = "_Permissions.cmi",
    src = "permissions.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Control",
    ],
)

#############
ocaml_module(
    name = "_Proof",
    sig  = ":_Proof.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "proof.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Proof.cmi",
    src = "proof.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Protocol_constants_checked",
    opts = MINA_BASE_MODULE_OPTS + [
        "-w",
        "-32",  # Unused value declaration.
    ],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "protocol_constants_checked.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Receipt",
    sig  = ":_Receipt.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "receipt.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Data_hash",
        ":_Hash_prefix",
        ":_Signed_command",
        ":_Transaction_union_payload",
    ],
)

################
ocaml_signature(
    name = "_Receipt.cmi",
    src = "receipt.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Data_hash",
        ":_Signed_command",
        ":_Transaction_union_payload",
    ],
)

#############
ocaml_module(
    name = "_Rpc_intf",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "rpc_intf.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Side_loaded_verification_key",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "side_loaded_verification_key.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Signature",
    sig  = ":_Signature.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "signature.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Signature_poly",
    ],
)

################
ocaml_signature(
    name = "_Signature.cmi",
    src = "signature.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Signature_poly",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "signature_poly.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Signed_command",
    sig  = ":_Signed_command.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "signed_command.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account_id",
        ":_Account_timing",
        ":_Import",
        ":_Signature",
        ":_Signed_command_payload",
        ":_Token_id",
        ":_Transaction_union_payload",
    ],
)

################
ocaml_signature(
    name = "_Signed_command.cmi",
    src = "signed_command.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Signed_command_intf",
        ":_Signed_command_payload",
    ],
)

#############
ocaml_module(
    name = "_Signed_command_intf",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "signed_command_intf.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account_id",
        ":_Account_timing",
        ":_Fee_excess",
        ":_Import",
        ":_Signature",
        ":_Signed_command_memo",
        ":_Signed_command_payload",
        ":_Token_id",
        ":_Transaction_union_tag",
    ],
)

#############
ocaml_module(
    name = "_Signed_command_memo",
    sig  = ":_Signed_command_memo.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "signed_command_memo.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Signed_command_memo.cmi",
    src = "signed_command_memo.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Signed_command_payload",
    sig  = ":_Signed_command_payload.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "signed_command_payload.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account_id",
        ":_Fee_excess",
        ":_Minting_payload",
        ":_New_account_payload",
        ":_New_token_payload",
        ":_Payment_payload",
        ":_Signed_command_memo",
        ":_Stake_delegation",
        ":_Token_id",
        ":_Transaction_union_tag",
    ],
)

################
ocaml_signature(
    name = "_Signed_command_payload.cmi",
    src = "signed_command_payload.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account_id",
        ":_Fee_excess",
        ":_Import",
        ":_Minting_payload",
        ":_New_account_payload",
        ":_New_token_payload",
        ":_Payment_payload",
        ":_Signed_command_memo",
        ":_Stake_delegation",
        ":_Token_id",
        ":_Transaction_union_tag",
    ],
)

#############
ocaml_module(
    name = "_Snapp_account",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "snapp_account.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Side_loaded_verification_key",
        ":_Snapp_basic",
        ":_Snapp_state",
    ],
)

#############
ocaml_module(
    name = "_Snapp_basic",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "snapp_basic.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Snapp_command",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "snapp_command.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account_id",
        ":_Fee_excess",
        ":_Hash_prefix",
        ":_Other_fee_payer",
        ":_Permissions",
        ":_Signature",
        ":_Snapp_basic",
        ":_Snapp_predicate",
        ":_Snapp_state",
        ":_Token_id",
    ],
)

#############
ocaml_module(
    name = "_Snapp_predicate",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "snapp_predicate.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account",
        ":_Epoch_data",
        ":_Epoch_ledger",
        ":_Epoch_seed",
        ":_Frozen_ledger_hash",
        ":_Hash_prefix",
        ":_Ledger_hash",
        ":_Receipt",
        ":_Snapp_account",
        ":_Snapp_basic",
        ":_Snapp_state",
        ":_State_hash",
        ":_Token_id",
    ],
)

#############
ocaml_module(
    name = "_Snapp_state",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "snapp_state.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        ":_Snapp_basic",  # obazl:retain
    ],
)

#############
ocaml_module(
    name = "_Snapp_statement",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "snapp_statement.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Other_fee_payer",
        ":_Snapp_basic",
        ":_Snapp_command",
        ":_Snapp_predicate",
        ":_Token_id",
    ],
)

#############
ocaml_module(
    name = "_Sok_message",
    sig  = ":_Sok_message.cmi",
    opts = MINA_BASE_MODULE_OPTS + [
        "-w",
        "-32",  # Unused value declaration.
    ],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "sok_message.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Import",
    ],
)

################
ocaml_signature(
    name = "_Sok_message.cmi",
    src = "sok_message.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Import",
    ],
)

#############
ocaml_module(
    name = "_Sparse_ledger",
    sig  = ":_Sparse_ledger.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "sparse_ledger.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account",
        ":_Account_id",
        ":_Coinbase",
        ":_Fee_transfer",
        ":_Import",
        ":_Ledger",
        ":_Ledger_hash",
        ":_Receipt",
        ":_Signed_command",
        ":_Snapp_command",
        ":_Snapp_predicate",
        ":_Token_id",
        ":_Token_permissions",
        ":_Transaction",
        ":_Transaction_logic",
    ],
)

################
ocaml_signature(
    name = "_Sparse_ledger.cmi",
    src = "sparse_ledger.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account",
        ":_Account_id",
        ":_Ledger",
        ":_Ledger_hash",
        ":_Signed_command",
        ":_Snapp_account",
        ":_Snapp_predicate",
        ":_Token_id",
        ":_Transaction",
    ],
)

#############
ocaml_module(
    name = "_Staged_ledger_hash",
    sig  = ":_Staged_ledger_hash.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "staged_ledger_hash.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Ledger_hash",
        ":_Pending_coinbase",
    ],
)

################
ocaml_signature(
    name = "_Staged_ledger_hash.cmi",
    src = "staged_ledger_hash.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Ledger_hash",
        ":_Pending_coinbase",
    ],
)

#############
ocaml_module(
    name = "_Stake_delegation",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "stake_delegation.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account_id",
        ":_Token_id",
    ],
)

#############
ocaml_module(
    name = "_State_body_hash",
    sig  = ":_State_body_hash.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "state_body_hash.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Data_hash",
    ],
)

################
ocaml_signature(
    name = "_State_body_hash.cmi",
    src = "state_body_hash.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Data_hash",
    ],
)

#############
ocaml_module(
    name = "_State_hash",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "state_hash.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Sync_ledger",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "sync_ledger.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account",
        ":_Ledger",
        ":_Ledger_hash",
    ],
)

#############
ocaml_module(
    name = "_Token_id",
    sig  = ":_Token_id.cmi",
    opts = MINA_BASE_MODULE_OPTS + [
        "-w",
        "-32",  # Unused value declaration.
    ],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "token_id.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Import",
    ],
)

################
ocaml_signature(
    name = "_Token_id.cmi",
    src = "token_id.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Import",
    ],
)

#############
ocaml_module(
    name = "_Token_permissions",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "token_permissions.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Import",
    ],
)

#############
ocaml_module(
    name = "_Transaction",
    opts = MINA_BASE_MODULE_OPTS + [
        "-w",
        "-32",  # Unused value declaration.
    ],
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "transaction.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Coinbase",
        ":_Fee_excess",
        ":_Fee_transfer",
        ":_Signed_command",
        ":_Snapp_command",
        ":_User_command",  # obazl:retain
    ],
)

#############
ocaml_module(
    name = "_Transaction_hash",
    sig  = ":_Transaction_hash.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "transaction_hash.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Coinbase",
        ":_Fee_transfer",
        ":_User_command",
    ],
)

################
ocaml_signature(
    name = "_Transaction_hash.cmi",
    src = "transaction_hash.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Coinbase",
        ":_Fee_transfer",
        ":_User_command",
    ],
)

#############
ocaml_module(
    name = "_Transaction_logic",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "transaction_logic.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account",
        ":_Account_id",
        ":_Coinbase",
        ":_Control",
        ":_Fee_transfer",
        ":_Ledger_hash",
        ":_Other_fee_payer",
        ":_Receipt",
        ":_Signed_command",
        ":_Snapp_basic",
        ":_Snapp_command",
        ":_Snapp_predicate",
        ":_Token_id",
        ":_Transaction",
        ":_User_command",
        ":_User_command_status",
        ":_With_status",
    ],
)

#############
ocaml_module(
    name = "_Transaction_union",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "transaction_union.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account",
        ":_Coinbase",
        ":_Fee_transfer",
        ":_Signature",
        ":_Signed_command",
        ":_Signed_command_memo",
        ":_Token_id",
        ":_Transaction",
        ":_Transaction_union_payload",
        ":_Transaction_union_tag",
    ],
)

#############
ocaml_module(
    name = "_Transaction_union_payload",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "transaction_union_payload.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Fee_excess",
        ":_Signed_command_payload",
        ":_Token_id",
        ":_Transaction_union_tag",
    ],
)

#############
ocaml_module(
    name = "_Transaction_union_tag",
    sig  = ":_Transaction_union_tag.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "transaction_union_tag.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Import",
    ],
)

################
ocaml_signature(
    name = "_Transaction_union_tag.cmi",
    src = "transaction_union_tag.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Transaction_validator",
    sig  = ":_Transaction_validator.cmi",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "transaction_validator.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account",
        ":_Account_id",
        ":_Ledger",
        ":_Ledger_hash",
        ":_Token_id",
        ":_Transaction_logic",
    ],
)

################
ocaml_signature(
    name = "_Transaction_validator.cmi",
    src = "transaction_validator.mli",
    opts = MINA_BASE_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account",
        ":_Account_id",
        ":_Ledger",
        ":_Signed_command",
        ":_Snapp_predicate",
        ":_Transaction",
        ":_Transaction_logic",
        ":_User_command_status",
    ],
)

#############
ocaml_module(
    name = "_User_command",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "user_command.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        # do not sort (buildifier)
        ":_Account",
        ":_Account_id",
        ":_Signed_command",
        ":_Signed_command_intf",
        ":_Snapp_command",
        ":_Token_id",
    ],
)

#############
ocaml_module(
    name = "_User_command_status",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    ppx_print = PPX_PRINT,  # obazl:retain
    struct = "user_command_status.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [":_Token_id"],  # obazl:retain
)

#############
ocaml_module(
    name = "_Util",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "util.ml",
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_With_status",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    struct = "with_status.ml",
    deps_opam = MINA_BASE_DEPS_OPAM,
    deps = MINA_BASE_DEPS + [
        ":_User_command_status",  # obazl:retain
    ],
)

#############
ocaml_module(
    name = "_Sample_keypairs",
    ## NOTE the name - must match the expected module name
    struct = "sample_keypairs.ml",
    opts = MINA_BASE_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "mina_base",
    ],
    ppx_data = CONFIG_MLH,
    deps = MINA_BASE_DEPS,
    deps_opam = MINA_BASE_DEPS_OPAM
)

########################################
TOOL = "//src/lib/mina_base/gen:gen.exe"

ocaml_genrule(
    ## NOTE the name - must match the expected module name
    name = "sample_keypairs",
    outs = [
        "sample_keypairs.ml",
        "sample_keypairs.json",
    ],
    cmd = "\n".join([
        "$(execpath {tool});".format(tool = TOOL),
        "cp sample_keypairs.ml $(location sample_keypairs.ml)",
        "cp sample_keypairs.json $(location sample_keypairs.json)",
    ]),
    tools = [TOOL],
)

###############
ppx_executable(
    name = "ppx1.exe",
    # TODO: implement print = "@ppx//print:binary",
    deps_adjunct_opam = [
        "yojson",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "bin_prot",
        "fieldslib",
        "ppx_bench.runtime-lib",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/lib/mina_base:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda",
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:ppx_version",
        "@snarky//h_list/ppx:ppx_h_list",
        "@snarky//ppx:ppx_snarky",
    ],
    deps_opam = [
        "ppx_assert",
        "ppx_base",
        "ppx_bench",
        "ppx_bin_prot",
        "ppx_custom_printf",
        "ppx_deriving.enum",
        "ppx_deriving.eq",
        "ppx_deriving.ord",
        "ppx_deriving_yojson",
        "ppx_fields_conv",
        "ppx_here",
        "ppx_inline_test",
        "ppx_let",
        "ppx_sexp_conv",
        "ppxlib",
    ]
)
