## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_interface",
    "ocaml_module",
    "ocaml_ns",
    "ppx_executable",
)
load(
    "//:BUILD.bzl",
    "CONFIG_MLH",
)

################################################################
## STANZA 1: LIBRARY SIGNATURE_LIB_NONCONSENSUS
################################################################
SIGNATURE_LIB_NONCONSENSUS_INTERFACE_OPTS = []

SIGNATURE_LIB_NONCONSENSUS_MODULE_OPTS = []

SIGNATURE_LIB_NONCONSENSUS_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:core_kernel",
    "@opam//pkg:yojson",
    "@mina//src/lib/bignum_bigint",
    "@mina//src/lib/blake2",
    "@mina//src/nonconsensus/hash_prefix_states:hash_prefix_states_nonconsensus",
    "@mina//src/nonconsensus/non_zero_curve_point:non_zero_curve_point_nonconsensus",
    "@mina//src/nonconsensus/random_oracle:random_oracle_nonconsensus",
    "@mina//src/nonconsensus/snark_params:snark_params_nonconsensus",
]

##############
ocaml_archive(
    name = "signature_lib_nonconsensus",
    doc = "Schnorr signatures using the tick and tock curves",
    opts = [],
    visibility = ["//visibility:public"],
    deps = SIGNATURE_LIB_NONCONSENSUS_DEPS + [
        # do not sort (buildifier)
        ":_Keypair",
        ":_Private_key",
        ":_Public_key",
        ":_Schnorr",
    ],
)

#########
ocaml_ns(
    name = "Signature_lib_nonconsensus_ns",
    ns = "signature_lib_nonconsensus",
    opts = [],
    submodules = [
        # do not sort (buildifier)
        "keypair.ml",
        "private_key.ml",
        "public_key.ml",
        "schnorr.ml",
    ],
)

#############
ocaml_module(
    name = "_Keypair",
    src = "keypair.ml",
    intf = ":_Keypair.cmi",
    ns = ":Signature_lib_nonconsensus_ns",
    opts = SIGNATURE_LIB_NONCONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "signature_lib_nonconsensus",
    ],
    ppx_data = CONFIG_MLH,
    deps = SIGNATURE_LIB_NONCONSENSUS_DEPS + [
        # do not sort (buildifier)
        ":_Private_key",
        ":_Public_key",
    ],
)

################
ocaml_interface(
    name = "_Keypair.cmi",
    src = "keypair.mli",
    ns = ":Signature_lib_nonconsensus_ns",
    opts = SIGNATURE_LIB_NONCONSENSUS_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "signature_lib_nonconsensus",
    ],
    ppx_data = CONFIG_MLH,
    deps = SIGNATURE_LIB_NONCONSENSUS_DEPS + [
        # do not sort (buildifier)
        ":_Private_key",
        ":_Public_key",
    ],
)

#############
ocaml_module(
    name = "_Private_key",
    src = "private_key.ml",
    ns = ":Signature_lib_nonconsensus_ns",
    opts = SIGNATURE_LIB_NONCONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "signature_lib_nonconsensus",
    ],
    ppx_data = CONFIG_MLH,
    deps = SIGNATURE_LIB_NONCONSENSUS_DEPS,
)

#############
ocaml_module(
    name = "_Public_key",
    src = "public_key.ml",
    intf = ":_Public_key.cmi",
    ns = ":Signature_lib_nonconsensus_ns",
    opts = SIGNATURE_LIB_NONCONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "signature_lib_nonconsensus",
    ],
    ppx_data = CONFIG_MLH,
    deps = SIGNATURE_LIB_NONCONSENSUS_DEPS,
)

################
ocaml_interface(
    name = "_Public_key.cmi",
    src = "public_key.mli",
    ns = ":Signature_lib_nonconsensus_ns",
    opts = SIGNATURE_LIB_NONCONSENSUS_INTERFACE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "signature_lib_nonconsensus",
    ],
    ppx_data = CONFIG_MLH,
    deps = SIGNATURE_LIB_NONCONSENSUS_DEPS + [
        # do not sort (buildifier)
        ":_Private_key",
    ],
)

#############
ocaml_module(
    name = "_Schnorr",
    src = "schnorr.ml",
    ns = ":Signature_lib_nonconsensus_ns",
    opts = SIGNATURE_LIB_NONCONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "signature_lib_nonconsensus",
    ],
    ppx_data = CONFIG_MLH,
    deps = SIGNATURE_LIB_NONCONSENSUS_DEPS,
)

###############
ppx_executable(
    name = "ppx1.exe",
    lazy_deps = [
        "@opam//pkg:yojson",
        "@opam//pkg:ppx_hash.runtime-lib",
        "@opam//pkg:ppx_deriving_yojson.runtime",
        "@opam//pkg:ppx_sexp_conv.runtime-lib",
        "@opam//pkg:ppx_deriving.runtime",
        "@opam//pkg:ppx_compare.runtime-lib",
        "@opam//pkg:ppx_inline_test.runtime-lib",
        "@opam//pkg:bin_prot",
    ],
    main = "//bzl/ppx/exe:Driver",
    opts = [],
    visibility = [
        "//src/nonconsensus/signature_lib:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda",
        "@opam//pkg:ppx_bin_prot",
        "@opam//pkg:ppx_compare",
        "@opam//pkg:ppx_custom_printf",
        "@opam//pkg:ppx_deriving.eq",
        "@opam//pkg:ppx_deriving_yojson",
        "@opam//pkg:ppx_hash",
        "@opam//pkg:ppx_inline_test",
        "@opam//pkg:ppx_let",
        "@opam//pkg:ppx_sexp_conv",
        "@opam//pkg:ppxlib",
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:ppx_version",
    ],
)
