load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ppx_executable",
)
load(
    "//:BUILD.bzl",
    "CONFIG_MLH",
)

################################################################
## STANZA 1: LIBRARY SNARK_BITS_NONCONSENSUS
################################################################
SNARK_BITS_NONCONSENSUS_MODULE_OPTS = []

SNARK_BITS_NONCONSENSUS_DEPS = [
    # do not sort (buildifier)
    "@snarky//fold_lib",
    "@snarky//bitstring_lib",
    "@snarky//src/base:snarky_backendless",
]
SNARK_BITS_NONCONSENSUS_DEPS_OPAM = [
    "core_kernel",
    "integers",
]

#########
ocaml_ns_library(
    name = "snark_bits",
    submodules = [
        ":_Bits",
        ":_Bits_intf",
    ],
)

#############
ocaml_module(
    name = "_Bits",
    struct = "bits.ml",
    opts = SNARK_BITS_NONCONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = SNARK_BITS_NONCONSENSUS_DEPS + [
        # do not sort (buildifier)
        ":_Bits_intf",
    ],
    deps_opam = SNARK_BITS_NONCONSENSUS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Bits_intf",
    struct = "bits_intf.ml",
    opts = SNARK_BITS_NONCONSENSUS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    ppx_data = CONFIG_MLH,
    deps = SNARK_BITS_NONCONSENSUS_DEPS,
    deps_opam = SNARK_BITS_NONCONSENSUS_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_deriving.runtime",
        "ppx_inline_test.runtime-lib",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    # visibility = [
    #     "//src/nonconsensus/snark_bits:__pkg__",
    # ],
    deps = [
        "@ppx_version//src:ppx_version",
        "@ppx_optcomp//src:ppx_optcomp",
    ],
    deps_opam = [
        "ppx_let",
        "ppx_deriving.eq",
        "ppx_inline_test",
    ]
)
